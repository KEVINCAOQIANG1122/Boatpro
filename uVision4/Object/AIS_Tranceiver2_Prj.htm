<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Object\AIS_Tranceiver2_Prj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Object\AIS_Tranceiver2_Prj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Tue Sep 20 11:04:46 2016
<BR><P>
<H3>Maximum Stack Usage =       1000 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GetCOMMMess &rArr; UartMsgProcess &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">MemManageException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManageException</a><BR>
 <LI><a href="#[4]">BusFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFaultException</a><BR>
 <LI><a href="#[5]">UsageFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFaultException</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[4]">BusFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[7]">DebugMonitor</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2]">HardFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3]">MemManageException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[1]">NMIException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[8]">PendSVC</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from stm32f10x_startup.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[6]">SVCHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[9]">SysTickHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[5]">UsageFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_startup.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x_startup.o(.text)
 <LI><a href="#[49]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[48]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[4a]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(.text)
</UL>
<P><STRONG><a name="[3cd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3ce]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3cf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3d0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3d1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3d2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[81]"></a>wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
</UL>

<P><STRONG><a name="[4e]"></a>EnableRtcInterrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[50]"></a>Clock_Configuration</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[54]"></a>SYSCLKConfig_STOP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f10x_target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStopMod
</UL>

<P><STRONG><a name="[5b]"></a>EnterStopMod</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTestCtrlLowFreq
</UL>

<P><STRONG><a name="[5d]"></a>EnterStandbyMod</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBKP_DRPara
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBKP_DRData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
</UL>

<P><STRONG><a name="[61]"></a>MCU_DebugConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_target.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_SysClock_Init
</UL>

<P><STRONG><a name="[63]"></a>Target_SysClock_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Target_SysClock_Init &rArr; RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_DebugConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[65]"></a>Target_Periph_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Target_Periph_Init &rArr; SI446X_ModuleInit &rArr; SI446X_RxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_OBJ_INIT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Init_IO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DeInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_wdg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_RFPower
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiaLED
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxTx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommStruc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Configuration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[73]"></a>Target_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerCtrl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_SysClock_Init
</UL>

<P><STRONG><a name="[75]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d3]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFaultException</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d4]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>MemManageException</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = MemManageException &rArr;  MemManageException (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d5]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFaultException</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = BusFaultException &rArr;  BusFaultException (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d6]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>UsageFaultException</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = UsageFaultException &rArr;  UsageFaultException (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d7]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d9]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3da]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3db]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; Exti1_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti1_Int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; DMA_ADC1_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC1_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1IntProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM2_IRQHandler &rArr; Tim2Interrupt &rArr; PTT_Timer_Service &rArr; PTT_TX_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; Usart1Interrupt &rArr; UartTxIntProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; Usart2Interrupt &rArr; UartTxIntProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI15_10_IRQHandler &rArr; SI446X_B_TxRxClockIRQS &rArr; TRCTRL_TxDataClockISR &rArr; RF_PowerDown &rArr; SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTCAlarm_IRQHandler &rArr; RTCAlarmInt &rArr; CalcuSleepSpan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IO_Ctrl</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, ioctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpsPulseEn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGpsPulseEn
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDAllLight
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDAllDown
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsPowerUp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsPowerDown
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsPara
</UL>

<P><STRONG><a name="[3dc]"></a>IO_Write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ioctrl.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>Para_Save</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, parastorage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Para_Save &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromChkSum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_CloseTimeSave
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_OpenTimeSave
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[96]"></a>Para_DefaultRead</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, parastorage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Para_DefaultRead &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
</UL>

<P><STRONG><a name="[98]"></a>Para_Read</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, parastorage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Para_Read &rArr; Para_DefaultRead &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromChkSum
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_DefaultRead
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[9a]"></a>Para_OpenTimeSave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parastorage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Para_OpenTimeSave &rArr; Para_Save &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
</UL>

<P><STRONG><a name="[9b]"></a>Para_CloseTimeSave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parastorage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Para_CloseTimeSave &rArr; Para_Save &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
</UL>

<P><STRONG><a name="[9c]"></a>IniEEPROM_Para</STRONG> (Thumb, 672 bytes, Stack size 56 bytes, parastorage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = IniEEPROM_Para &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[a4]"></a>RxTxCtrl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rxtxctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxTxCtrl &rArr; RxTxSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
</UL>

<P><STRONG><a name="[a7]"></a>LocalClockStateCtrlProcess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systermtick
</UL>

<P><STRONG><a name="[a6]"></a>init_systermtick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalClockStateCtrlProcess
</UL>

<P><STRONG><a name="[188]"></a>GetLocalClockTickProcess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemtick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTestCtrl
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_TestMain
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDReadFileProcess
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCtrlProcess
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinPulseDown
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SingleTaskIsTimeout
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PeriodTaskIsTimeout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommCtrlProcess
</UL>

<P><STRONG><a name="[187]"></a>SetTimePeriodProcess</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, systemtick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTestCtrl
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_TestMain
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniTestingPara
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUsartFlg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDReadFileProcess
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCtrlProcess
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaLEDCtrlPara
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskTimEnable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsCtrlStru
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimAdjust
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_TdmaSchedStructInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SingleTaskIsTimeout
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PeriodTaskIsTimeout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommCtrlProcess
</UL>

<P><STRONG><a name="[22d]"></a>LocalClockCtrlMainProcess</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systemtick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>DLS_InstFrameFifoStructInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_ModuleInit
</UL>

<P><STRONG><a name="[a8]"></a>DLS_InstPacketProbeStructInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLS_InstPacketProbeStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_ModuleInit
</UL>

<P><STRONG><a name="[ac]"></a>DLS_InstBitStreamPutBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLS_InstBitStreamPutBit &rArr; DLS_BitStreamPutBit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamPutBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>

<P><STRONG><a name="[ad]"></a>DLS_InstBitStreamGetBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBit
</UL>

<P><STRONG><a name="[b2]"></a>DLS_Inst1FrameRxFifoEnque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameRxFifoEnque
</UL>

<P><STRONG><a name="[b4]"></a>DLS_Inst2FrameRxFifoEnque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameRxFifoEnque
</UL>

<P><STRONG><a name="[e4]"></a>DLS_InstFrameTxFifoEnque</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DLS_InstFrameTxFifoEnque
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
</UL>

<P><STRONG><a name="[b5]"></a>DLS_Inst1FrameRxFifoDeque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLS_Inst1FrameRxFifoDeque &rArr; DLS_FrameRxFifoDeque
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameRxFifoDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
</UL>

<P><STRONG><a name="[b7]"></a>DLS_Inst2FrameRxFifoDeque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLS_Inst2FrameRxFifoDeque &rArr; DLS_FrameRxFifoDeque
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameRxFifoDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
</UL>

<P><STRONG><a name="[2a3]"></a>DLS_InstFrameTxFifoDeque</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DLS_InstFrameTxFifoDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
</UL>

<P><STRONG><a name="[c0]"></a>DLS_InstPacketProbeProcess</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DLS_InstPacketProbeProcess &rArr; DLS_PacketProbeProcess &rArr; DLS_BitStreamGetFrame &rArr; DLS_BitStreamGetBitQuantity
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[c1]"></a>DLS_FrameCrcCheck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DLS_FrameCrcCheck &rArr; AIS_Cal_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIS_Cal_CRC16
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
</UL>

<P><STRONG><a name="[c3]"></a>DLS_FrameBitStuff</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DLS_FrameBitStuff
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
</UL>

<P><STRONG><a name="[c4]"></a>DLS_FrameBitDestuff</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c5]"></a>DLS_FrameDataPack</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLS_FrameDataPack
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
</UL>

<P><STRONG><a name="[c6]"></a>DLS_FrameDataPack1</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLS_FrameDataPack1
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
</UL>

<P><STRONG><a name="[c7]"></a>DLS_FrameDataDepack</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c8]"></a>DLS_FrameNrziCode</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLS_FrameNrziCode
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
</UL>

<P><STRONG><a name="[c9]"></a>DLS_FrameNrziDecode</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ca]"></a>DLS_FrameBuild</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DLS_FrameBuild &rArr; DLS_FrameCrcCheck &rArr; AIS_Cal_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameNrziCode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameDataPack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBitStuff
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameCrcCheck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
</UL>

<P><STRONG><a name="[cb]"></a>DLS_FrameBuildTest</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DLS_FrameBuildTest &rArr; DLS_FrameCrcCheck &rArr; AIS_Cal_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameDataPack1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBitStuff
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameCrcCheck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
</UL>

<P><STRONG><a name="[cc]"></a>DLS_FrameBuildTest2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, datalinkservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameDataPack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBitStuff
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameCrcCheck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[cd]"></a>DLS_ModuleInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLS_ModuleInit &rArr; DLS_InstPacketProbeStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstPacketProbeStructInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstFrameFifoStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[d1]"></a>LME_InstBinMsgFifoStructInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, linkmanagemententity.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_ModuleInit
</UL>

<P><STRONG><a name="[d0]"></a>LME_ModuleInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linkmanagemententity.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgFifoStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[d2]"></a>LME_Inst1BinMsgRxFifoEnque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoEnque
</UL>

<P><STRONG><a name="[d4]"></a>LME_Inst2BinMsgRxFifoEnque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoEnque
</UL>

<P><STRONG><a name="[d5]"></a>LME_InstBinMsgTxFifoEnque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoEnque
</UL>

<P><STRONG><a name="[d7]"></a>LME_Inst1BinMsgRxFifoDeque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoDeque
</UL>

<P><STRONG><a name="[d9]"></a>LME_Inst2BinMsgRxFifoDeque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoDeque
</UL>

<P><STRONG><a name="[da]"></a>LME_InstBinMsgTxFifoDeque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoDeque
</UL>

<P><STRONG><a name="[dd]"></a>LME_InstBinMsgRxFifoPortIn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LME_InstBinMsgRxFifoPortIn &rArr; LME_BinMsgRxFifoPortIn &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgPort
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>LME_InstBinMsgRxFifoPortOut</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LME_InstBinMsgRxFifoPortOut &rArr; LME_BinMsgRxFifoPortOut &rArr; AISDI_BuildVDM &rArr; AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgPort
</UL>

<P><STRONG><a name="[e3]"></a>LME_BinMsgTxFifoPortOut</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LME_BinMsgTxFifoPortOut &rArr; AISDI_BuildVDO &rArr; AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoDeque
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstFrameTxFifoEnque
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgPort
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortOut
</UL>

<P><STRONG><a name="[e6]"></a>LME_InstBinMsgTxFifoPortOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linkmanagemententity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
</UL>

<P><STRONG><a name="[e7]"></a>LME_InstBinMsgTxFifoPortIn</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LME_InstBinMsgTxFifoPortIn &rArr; MSGMAN_TxMsgListGetElem &rArr; MSGMAN_MsgStaticListGetHead &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListGetElem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoEnque
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgPort
</UL>

<P><STRONG><a name="[e9]"></a>LME_BinMsgPort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LME_BinMsgPort &rArr; LME_InstBinMsgRxFifoPortOut &rArr; LME_BinMsgRxFifoPortOut &rArr; AISDI_BuildVDM &rArr; AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgRxFifoPortOut
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgRxFifoPortIn
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[ea]"></a>PHY_InstNRZIStructInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, physicallayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHY_InstNRZIStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_NRZIStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ModuleInit
</UL>

<P><STRONG><a name="[ec]"></a>PHY_InstNRZIDecodeStart</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, physicallayer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_NRZIDecodeStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ModuleInit
</UL>

<P><STRONG><a name="[3dd]"></a>PHY_InstNRZIDecodeStop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, physicallayer.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>PHY_InstNRZIDecode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, physicallayer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_NRZIDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>

<P><STRONG><a name="[f0]"></a>PHY_ModuleInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, physicallayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PHY_ModuleInit &rArr; PHY_InstNRZIStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIDecodeStart
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[f1]"></a>InitGpsCell</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitGpsCell &rArr; IniGpsMsgStru
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsMsgStru
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[f4]"></a>bitmap_set_value_for_U8</STRONG> (Thumb, 246 bytes, Stack size 20 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bitmap_set_value_for_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[f3]"></a>bitmap_set_value</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value_for_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg7
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg6
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg5
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg3
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg24B
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg24A
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg19
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg18
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg14
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg13
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg12
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg6
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg27
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg26
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg25
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg23
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg22
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg21
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg20
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg17
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg16
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg15
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg11
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg10
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg9
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg4
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg2
</UL>

<P><STRONG><a name="[f6]"></a>bitmap_get_value_for_U8</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_get_value_for_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
</UL>

<P><STRONG><a name="[f5]"></a>bitmap_get_value</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value_for_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg24A
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg14
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg10
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg27
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg26
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg25
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg24B
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg23
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg22
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg21
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg20
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg19
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg18
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg17
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg16
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg15
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg12
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg9
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg8
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg7_13
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg6
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg5
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg4_11
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg3
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg1_2
</UL>

<P><STRONG><a name="[f7]"></a>InitMsg1</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg1 &rArr; AISMSG_BuildMsg1 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg1
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg1
</UL>

<P><STRONG><a name="[f9]"></a>InitMsg3</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg3 &rArr; AISMSG_BuildMsg3 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg3
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg3
</UL>

<P><STRONG><a name="[fb]"></a>InitMsg5</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = InitMsg5 &rArr; AISMSG_BuildMsg5 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg5
</UL>

<P><STRONG><a name="[fd]"></a>InitMsg6</STRONG> (Thumb, 226 bytes, Stack size 168 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = InitMsg6 &rArr; AISMSG_BuildMsg6 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToSixBinCode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg6
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6
</UL>

<P><STRONG><a name="[100]"></a>InitMsg6Test</STRONG> (Thumb, 74 bytes, Stack size 144 bytes, ais_msgmodu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg6
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6Test
</UL>

<P><STRONG><a name="[101]"></a>InitMsg7</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg7 &rArr; AISMSG_BuildMsg7 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg7
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg7
</UL>

<P><STRONG><a name="[103]"></a>InitMsg8</STRONG> (Thumb, 200 bytes, Stack size 160 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = InitMsg8 &rArr; AISMSG_BuildMsg8 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToSixBinCode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg8
</UL>

<P><STRONG><a name="[105]"></a>InitMsg12</STRONG> (Thumb, 98 bytes, Stack size 200 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = InitMsg12 &rArr; AISMSG_BuildMsg12 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToSixBinCode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg12
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg12
</UL>

<P><STRONG><a name="[107]"></a>InitMsg13</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg13 &rArr; AISMSG_BuildMsg13 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg13
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg13
</UL>

<P><STRONG><a name="[109]"></a>InitMsg14</STRONG> (Thumb, 90 bytes, Stack size 192 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = InitMsg14 &rArr; AISMSG_BuildMsg14 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToSixBinCode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg14
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg14
</UL>

<P><STRONG><a name="[10b]"></a>InitMsg18</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg18
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18
</UL>

<P><STRONG><a name="[10d]"></a>InitMsg18Test</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg18Test &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg18
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18Test
</UL>

<P><STRONG><a name="[10e]"></a>InitMsg19</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = InitMsg19 &rArr; AISMSG_BuildMsg19 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg19
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg19
</UL>

<P><STRONG><a name="[110]"></a>InitMsg24A</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InitMsg24A &rArr; AISMSG_BuildMsg24A &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg24A
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24A
</UL>

<P><STRONG><a name="[112]"></a>InitMsg24B</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = InitMsg24B &rArr; AISMSG_BuildMsg24B &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_BuildMsg24B
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24B
</UL>

<P><STRONG><a name="[114]"></a>UpdateDynamicReportInterval</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ais_msgmodu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_InstReportIntervalSample
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[116]"></a>UpdateAisDynamicInfo</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UpdateAisDynamicInfo &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsFixSta
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[11b]"></a>GetTemperForCOG</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ais_msgmodu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[124]"></a>GetDistance</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GetDistance &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
</UL>

<P><STRONG><a name="[12c]"></a>GetSOG</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, ais_msgmodu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
</UL>

<P><STRONG><a name="[140]"></a>AISDI_InitABMStruct</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_ModuleInit
</UL>

<P><STRONG><a name="[141]"></a>AISDI_InitBBMStruct</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_ModuleInit
</UL>

<P><STRONG><a name="[3de]"></a>AISDI_InitAisDiSenFifoInstance</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>AsciiToSixBinCode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg14
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg12
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg6
</UL>

<P><STRONG><a name="[138]"></a>SixBinCodeToAscii</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
</UL>

<P><STRONG><a name="[12f]"></a>AISDI_IsSenQueFull</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenEnque
</UL>

<P><STRONG><a name="[135]"></a>AISDI_IsSenQueEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenDeque
</UL>

<P><STRONG><a name="[133]"></a>AISDI_SenEnque</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_IsSenQueFull
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildABK
</UL>

<P><STRONG><a name="[134]"></a>AISDI_SenDeque</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AISDI_SenDeque
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_IsSenQueEmpty
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenPrint
</UL>

<P><STRONG><a name="[df]"></a>AISDI_BuildVDM</STRONG> (Thumb, 1410 bytes, Stack size 184 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AISDI_BuildVDM &rArr; AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value_for_U8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenEnque
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixBinCodeToAscii
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
</UL>

<P><STRONG><a name="[e5]"></a>AISDI_BuildVDO</STRONG> (Thumb, 1396 bytes, Stack size 184 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AISDI_BuildVDO &rArr; AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value_for_U8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenEnque
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixBinCodeToAscii
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
</UL>

<P><STRONG><a name="[139]"></a>AISDI_BuildABK</STRONG> (Thumb, 196 bytes, Stack size 128 bytes, aisdigitalinterface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenEnque
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>

<P><STRONG><a name="[13a]"></a>AISDI_SenPrint</STRONG> (Thumb, 24 bytes, Stack size 88 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AISDI_SenPrint &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentencePrint
</UL>

<P><STRONG><a name="[13b]"></a>AISDI_SentencePrint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AISDI_SentencePrint &rArr; AISDI_SenPrint &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[13c]"></a>AISDI_SentenceParse</STRONG> (Thumb, 1298 bytes, Stack size 224 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AISDI_SentenceParse &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSegment
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[1d0]"></a>AISDI_ABMIsValid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1d2]"></a>AISDI_BBMIsValid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[13f]"></a>AISDI_ModuleInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, aisdigitalinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AISDI_ModuleInit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_InitBBMStruct
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_InitABMStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[f8]"></a>AISMSG_BuildMsg1</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AISMSG_BuildMsg1 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg1
</UL>

<P><STRONG><a name="[142]"></a>AISMSG_BuildMsg2</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[fa]"></a>AISMSG_BuildMsg3</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AISMSG_BuildMsg3 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg3
</UL>

<P><STRONG><a name="[143]"></a>AISMSG_BuildMsg4</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[fc]"></a>AISMSG_BuildMsg5</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg5 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg5
</UL>

<P><STRONG><a name="[ff]"></a>AISMSG_BuildMsg6</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg6 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg6Test
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg6
</UL>

<P><STRONG><a name="[102]"></a>AISMSG_BuildMsg7</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AISMSG_BuildMsg7 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg7
</UL>

<P><STRONG><a name="[104]"></a>AISMSG_BuildMsg8</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg8 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg8
</UL>

<P><STRONG><a name="[144]"></a>AISMSG_BuildMsg9</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[145]"></a>AISMSG_BuildMsg10</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[146]"></a>AISMSG_BuildMsg11</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[106]"></a>AISMSG_BuildMsg12</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg12 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg12
</UL>

<P><STRONG><a name="[108]"></a>AISMSG_BuildMsg13</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AISMSG_BuildMsg13 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg13
</UL>

<P><STRONG><a name="[10a]"></a>AISMSG_BuildMsg14</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg14 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg14
</UL>

<P><STRONG><a name="[147]"></a>AISMSG_BuildMsg15</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[148]"></a>AISMSG_BuildMsg16</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[149]"></a>AISMSG_BuildMsg17</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[10c]"></a>AISMSG_BuildMsg18</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg18Test
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg18
</UL>

<P><STRONG><a name="[10f]"></a>AISMSG_BuildMsg19</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg19 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg19
</UL>

<P><STRONG><a name="[14a]"></a>AISMSG_BuildMsg20</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[14b]"></a>AISMSG_BuildMsg21</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[14c]"></a>AISMSG_BuildMsg22</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[14d]"></a>AISMSG_BuildMsg23</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[111]"></a>AISMSG_BuildMsg24A</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg24A &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg24A
</UL>

<P><STRONG><a name="[113]"></a>AISMSG_BuildMsg24B</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AISMSG_BuildMsg24B &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg24B
</UL>

<P><STRONG><a name="[14e]"></a>AISMSG_BuildMsg25</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[14f]"></a>AISMSG_BuildMsg26</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[150]"></a>AISMSG_BuildMsg27</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, aismsgmodule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_value
</UL>

<P><STRONG><a name="[168]"></a>AISMSG_ParseMsgType</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, aismsgmodule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[167]"></a>AISMSG_ParseMsg</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AISMSG_ParseMsg &rArr; AISMSG_ParseMsg26 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsgType
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg24A
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg14
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg10
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg27
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg26
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg25
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg24B
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg23
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg22
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg21
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg20
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg19
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg18
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg17
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg16
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg15
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg12
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg9
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg8
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg7_13
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg6
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg5
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg4_11
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg3
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgRxProcess
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
</UL>

<P><STRONG><a name="[1d1]"></a>AISMSG_ConvertToMsgType</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, aismsgmodule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[3df]"></a>AISMSG_ConvertToMsgID</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, aismsgmodule.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>SLOT_UpdateSlotMapIndexFrame</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, slot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlotState
</UL>

<P><STRONG><a name="[16d]"></a>SetSlotState</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, slot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetSlotState
</UL>

<P><STRONG><a name="[16e]"></a>GetSlotState</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, slot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCandidateSlot
</UL>

<P><STRONG><a name="[16f]"></a>SelectCandidateSlot</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, slot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SelectCandidateSlot &rArr; GetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotState
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[19f]"></a>SelectCandidateSlotFrame</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, slot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
</UL>

<P><STRONG><a name="[179]"></a>CalcSlotOffset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, slot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskIsTxTimExpired
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_IsSendTimArrived
</UL>

<P><STRONG><a name="[181]"></a>CalcFrameNum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, slot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskIsSendTimExpired
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskNextTxCfg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetSlotState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
</UL>

<P><STRONG><a name="[178]"></a>CalcSlotNum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, slot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskIsSendTimExpired
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskNextTxCfg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetSlotState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_IsSendTimArrived
</UL>

<P><STRONG><a name="[3e0]"></a>CalcSlotSum</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, slot.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>IsSlotValid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, slot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[3e1]"></a>SLOT_ModuleInit</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, slot.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>SOTDMA_CalcSelectIntervalOffset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SOTDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetRr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaParaStructInit
</UL>

<P><STRONG><a name="[173]"></a>SOTDMA_SetRrDual</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SOTDMA_SetRrDual &rArr; SOTDMA_SetRr &rArr; SOTDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetRr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[195]"></a>SOTDMA_IsRrChanged</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[17a]"></a>SOTDMA_SetNssDual</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SOTDMA_SetNssDual
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNss
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
</UL>

<P><STRONG><a name="[180]"></a>SOTDMA_SetSlotState</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SOTDMA_SetSlotState &rArr; SetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlotState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SetSlotState
</UL>

<P><STRONG><a name="[3e2]"></a>TDMA_GetSyncState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tdma.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>ITDMA_CalcCommStateKeepFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[192]"></a>ITDMA_CalcCommStateNumberOfSlots</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[191]"></a>ITDMA_CalcCommStateSlotIncrement</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[19b]"></a>ITDMA_CalcSelectIntervalOffset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSelectIntervalOffset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaParaStructInit
</UL>

<P><STRONG><a name="[1a3]"></a>ITDMA_CalcSlotOffset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
</UL>

<P><STRONG><a name="[1a2]"></a>ITDMA_CalcSlotQuantity</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
</UL>

<P><STRONG><a name="[1a1]"></a>ITDMA_CalcSlotKeep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
</UL>

<P><STRONG><a name="[1a0]"></a>ITDMA_SetSlotState</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ITDMA_SetSlotState &rArr; SetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSlotKeep
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSlotQuantity
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSlotOffset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlotState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SetSlotState
</UL>

<P><STRONG><a name="[115]"></a>TDMA_InstReportIntervalSample</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDynamicReportInterval
</UL>

<P><STRONG><a name="[1ab]"></a>TDMA_InstSchedule</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = TDMA_InstSchedule &rArr; TDMA_Schedule &rArr; SOTDMA_ScheduleDual &rArr; SOTDMA_Schedule &rArr; TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxProcess
</UL>

<P><STRONG><a name="[1ac]"></a>TDMA_SetSlotState</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TDMA_SetSlotState &rArr; ITDMA_SetSlotState &rArr; SetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsPowerupFixState
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSlotState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetSlotState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgRxProcess
</UL>

<P><STRONG><a name="[1ad]"></a>TDMA_ModuleInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TDMA_ModuleInit &rArr; TDMA_TdmaSchedStructInit &rArr; ITDMA_ItdmaSchedDualStructInit &rArr; ITDMA_ItdmaSchedStructInit &rArr; ITDMA_ItdmaParaStructInit &rArr; ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_TdmaSchedStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[26e]"></a>DEVINFO_InstResetGpsOutputCnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, deviceinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[219]"></a>DEVINFO_ModuleInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, deviceinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DEVINFO_ModuleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[1d8]"></a>AISINFO_InstRecStationQuantityIncrease</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aisinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgRxProcess
</UL>

<P><STRONG><a name="[2b8]"></a>AISINFO_InstRecStationQuantityUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, aisinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
</UL>

<P><STRONG><a name="[17f]"></a>AISINFO_InstRecStationGetQuantity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aisinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetSubMsg
</UL>

<P><STRONG><a name="[1b0]"></a>AISINFO_ModuleInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, aisinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AISINFO_ModuleInit &rArr; AISINFO_AisStaticInfoStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_AisStaticInfoStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[1bf]"></a>MSGMAN_MsgTxTaskTxCfg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1b2]"></a>MSGMAN_MsgTxTaskNextTxCfg</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSGMAN_MsgTxTaskNextTxCfg &rArr; Random
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1b3]"></a>MSGMAN_MsgTxTaskIsTxTimExpired</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSGMAN_MsgTxTaskIsTxTimExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskIsSendTimExpired
</UL>

<P><STRONG><a name="[1b4]"></a>MSGMAN_MsgTxTaskIsSendTimExpired</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSGMAN_MsgTxTaskIsSendTimExpired &rArr; MSGMAN_MsgTxTaskIsTxTimExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskIsTxTimExpired
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1b8]"></a>MSGMAN_TxMsgListInsert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSGMAN_TxMsgListInsert &rArr; MSGMAN_MsgStaticListInsert &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18Test
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6Test
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg7
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg13
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg12
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg8
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg14
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg19
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24A
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg5
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg1
</UL>

<P><STRONG><a name="[1b9]"></a>SendMsg5</STRONG> (Thumb, 124 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SendMsg5 &rArr; InitMsg5 &rArr; AISMSG_BuildMsg5 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg5
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1ba]"></a>SendMsg24B</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SendMsg24B &rArr; InitMsg24B &rArr; AISMSG_BuildMsg24B &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg24B
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1bb]"></a>SendMsg24A</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SendMsg24A &rArr; InitMsg24A &rArr; AISMSG_BuildMsg24A &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg24A
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1bc]"></a>SendMsg19</STRONG> (Thumb, 226 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = SendMsg19 &rArr; InitMsg19 &rArr; AISMSG_BuildMsg19 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg19
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1c2]"></a>MSGMAN_TxMsgListIsEmpty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListIsEmpty
</UL>

<P><STRONG><a name="[1c3]"></a>MSGMAN_RxMsgListIsEmpty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListIsEmpty
</UL>

<P><STRONG><a name="[1c4]"></a>MSGMAN_TxMsgListIsFull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListIsFull
</UL>

<P><STRONG><a name="[1c5]"></a>MSGMAN_RxMsgListIsFull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListIsFull
</UL>

<P><STRONG><a name="[e1]"></a>MSGMAN_RxMsgListInsert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSGMAN_RxMsgListInsert &rArr; MSGMAN_MsgStaticListInsert &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
</UL>

<P><STRONG><a name="[e8]"></a>MSGMAN_TxMsgListGetElem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSGMAN_TxMsgListGetElem &rArr; MSGMAN_MsgStaticListGetHead &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListGetHead
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
</UL>

<P><STRONG><a name="[1c6]"></a>MSGMAN_RxMsgListGetElem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSGMAN_RxMsgListGetElem &rArr; MSGMAN_MsgStaticListGetHead &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListGetHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgRxProcess
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
</UL>

<P><STRONG><a name="[1c9]"></a>SendMsg14</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = SendMsg14 &rArr; InitMsg14 &rArr; AISMSG_BuildMsg14 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg14
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1ca]"></a>SendMsg8</STRONG> (Thumb, 202 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SendMsg8 &rArr; InitMsg8 &rArr; AISMSG_BuildMsg8 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1cb]"></a>SendMsg12</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = SendMsg12 &rArr; InitMsg12 &rArr; AISMSG_BuildMsg12 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg12
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1cc]"></a>SendMsg6</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SendMsg6 &rArr; InitMsg6 &rArr; AISMSG_BuildMsg6 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg6
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1cd]"></a>SendMsg13</STRONG> (Thumb, 142 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SendMsg13 &rArr; InitMsg13 &rArr; AISMSG_BuildMsg13 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg13
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1ce]"></a>SendMsg7</STRONG> (Thumb, 140 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SendMsg7 &rArr; InitMsg7 &rArr; AISMSG_BuildMsg7 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg7
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[185]"></a>SendMsg1</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SendMsg1 &rArr; InitMsg1 &rArr; AISMSG_BuildMsg1 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SendMsg
</UL>

<P><STRONG><a name="[183]"></a>SendMsg3</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SendMsg3 &rArr; InitMsg3 &rArr; AISMSG_BuildMsg3 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg3
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SendMsg
</UL>

<P><STRONG><a name="[1d3]"></a>SendMsg6Test</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, msgmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg6Test
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>

<P><STRONG><a name="[184]"></a>SendMsg18</STRONG> (Thumb, 164 bytes, Stack size 184 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg18
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SendMsg
</UL>

<P><STRONG><a name="[1d4]"></a>SendMsg18Test</STRONG> (Thumb, 154 bytes, Stack size 184 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SendMsg18Test &rArr; InitMsg18Test &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg18Test
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
</UL>

<P><STRONG><a name="[1d5]"></a>MSGMAN_MsgTxProcess</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = MSGMAN_MsgTxProcess &rArr; MSGMAN_BurstSchedule &rArr; SendMsg12 &rArr; InitMsg12 &rArr; AISMSG_BuildMsg12 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_InstSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[1d6]"></a>MSGMAN_MsgRxProcess</STRONG> (Thumb, 606 bytes, Stack size 192 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MSGMAN_MsgRxProcess &rArr; TDMA_SetSlotState &rArr; ITDMA_SetSlotState &rArr; SetSlotState &rArr; SLOT_UpdateSlotMapIndexFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListGetElem
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_AisAckFifoEnque
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_InstRecStationQuantityIncrease
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SetSlotState
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[1d9]"></a>MSGMAN_ModuleInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MSGMAN_ModuleInit &rArr; MSGMAN_MsgStaticListStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_AisAckFifoStructInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedStructInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[1dd]"></a>AisMain</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aisptlmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = AisMain &rArr; MSGMAN_MsgTxProcess &rArr; MSGMAN_BurstSchedule &rArr; SendMsg12 &rArr; InitMsg12 &rArr; AISMSG_BuildMsg12 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAisDynamicInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDynamicReportInterval
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgPort
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstPacketProbeProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgRxProcess
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxProcess
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentencePrint
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>InitTimAdjust</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, adjust.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitTimAdjust
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[1e7]"></a>ResetTimAdjust</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adjust.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[3e3]"></a>ResetTimAdjustCtrlState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adjust.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>RtcClockChoice</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, adjust.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RtcClockChoice &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTestCtrl
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1ed]"></a>IsRtcClockSourceLSE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adjust.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRtcPhaseAdjust
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1e4]"></a>TimAdjustProcess</STRONG> (Thumb, 1572 bytes, Stack size 40 bytes, adjust.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TimAdjustProcess &rArr; RtcClockChoice &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTimSaveState
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsPowerupProtect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimSaveState
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimCount
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimCnt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCnt
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimPhaseAdjust
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRtcPhaseAdjust
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcClockSourceLSE
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTimAdjust
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e4]"></a>SetAdjustCalcNow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adjust.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>GetAdjustSleepState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adjust.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>HexToAscII</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOMMMess
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataToAscII
</UL>

<P><STRONG><a name="[1f1]"></a>DataToAscII</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAscII
</UL>

<P><STRONG><a name="[33e]"></a>UartMsgCheckSum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartMsgCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOMMMess
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDebugMsg
</UL>

<P><STRONG><a name="[93]"></a>EEpromChkSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EEpromChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
</UL>

<P><STRONG><a name="[3e6]"></a>ChkSum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>AIS_Cal_CRC16</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AIS_Cal_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameCrcCheck
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCry
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCry
</UL>

<P><STRONG><a name="[3e7]"></a>ByteToIntDataCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>Delay_us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpLedCtrl
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SelfCheck
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Reset
</UL>

<P><STRONG><a name="[3e9]"></a>GetMaskBitNum8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>GetMaskBitNum16</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>GetMaskBitNum32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWordFieldValue
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordFieldValue
</UL>

<P><STRONG><a name="[1f3]"></a>GetWordFieldValue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaskBitNum32
</UL>

<P><STRONG><a name="[1f5]"></a>SetWordFieldValue</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaskBitNum32
</UL>

<P><STRONG><a name="[189]"></a>Random</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Random
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskNextTxCfg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[3eb]"></a>TIME_DateTimeStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>TIME_DateTimeStructCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>TIME_IsDateValid</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_IsDateTimeValid
</UL>

<P><STRONG><a name="[1f6]"></a>TIME_IsDateTimeValid</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIME_IsDateTimeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_IsDateValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_DateTimeOffset28Days
</UL>

<P><STRONG><a name="[1f8]"></a>TIME_DateTimeOffset28Days</STRONG> (Thumb, 488 bytes, Stack size 20 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIME_DateTimeOffset28Days &rArr; TIME_IsDateTimeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_IsDateTimeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
</UL>

<P><STRONG><a name="[3ed]"></a>IniGpsCtrlMsgTestStru</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>IniGpsMsgStru</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IniGpsMsgStru
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpsCell
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsPara
</UL>

<P><STRONG><a name="[209]"></a>ResetGpsMsgStru</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsWakeUp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsPowerUp
</UL>

<P><STRONG><a name="[1fb]"></a>InitGpsSynStru</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsPara
</UL>

<P><STRONG><a name="[1f9]"></a>IniGpsCtrlStru</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IniGpsCtrlStru
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsPara
</UL>

<P><STRONG><a name="[208]"></a>ResetGpsCtrlStru</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsWakeUp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsPowerUp
</UL>

<P><STRONG><a name="[1fa]"></a>IniGpsPara</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IniGpsPara &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsMsgStru
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsCtrlStru
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpsSynStru
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[3ee]"></a>SetGpsPositionSampleNewFlg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>DealGpsMsg</STRONG> (Thumb, 1798 bytes, Stack size 120 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = DealGpsMsg &rArr; GetDistance &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSegment
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMsgProcess
</UL>

<P><STRONG><a name="[1ff]"></a>GpsOutputProcess</STRONG> (Thumb, 442 bytes, Stack size 128 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GpsOutputProcess &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSegment
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMsgProcess
</UL>

<P><STRONG><a name="[200]"></a>GpsMsgProcess</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GpsMsgProcess &rArr; DealGpsMsg &rArr; GetDistance &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsOutputProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOMMMess
</UL>

<P><STRONG><a name="[17e]"></a>IsGpsFix</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsFixSta
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti1_Int
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetSubMsg
</UL>

<P><STRONG><a name="[117]"></a>GetGpsFixSta</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetGpsFixSta
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsFix
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAisDynamicInfo
</UL>

<P><STRONG><a name="[3ef]"></a>ResetGpsNormalFixState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>SetGpsPowerupFixState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>GetGpsPowerupFixState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SetSlotState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[3f1]"></a>SetGpsNormalFixState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>SlotSynClac</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SlotSynClac &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
</UL>

<P><STRONG><a name="[202]"></a>GpsCtrlProcess</STRONG> (Thumb, 1258 bytes, Stack size 160 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = GpsCtrlProcess &rArr; GetDistance &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_CloseTimeSave
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_OpenTimeSave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskTimEnable
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotSynClac
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_DateTimeOffset28Days
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsFix
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[205]"></a>GpsPowerDown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
</UL>

<P><STRONG><a name="[206]"></a>GpsCtrlProcess_MsgTest</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsPowerDown
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsFix
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>

<P><STRONG><a name="[3f2]"></a>GetMsgTestSendFlg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>ResetGpsSynSta</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>GpsPowerUp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGpsCtrlStru
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGpsMsgStru
</UL>

<P><STRONG><a name="[20a]"></a>GpsWakeUp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGpsCtrlStru
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGpsMsgStru
</UL>

<P><STRONG><a name="[27b]"></a>GetGpsSleepSta</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[3f4]"></a>GetGpsSynSta</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>GetGpsNormalFixStateRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>GetGpsNormalFixState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>IsGpsPowerupProtect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti1_Int
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[3f7]"></a>SetGpsOnTimSlot</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>SetGpsOnTimFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>GetGpsOnTim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Sleep
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepPhases_Sleep
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsOnTimeout
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsWakeupSta
</UL>

<P><STRONG><a name="[3f9]"></a>SetGpsOnTimEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>ResetGpsOnTimEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>GetGpsOnTimEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Sleep
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepPhases_Sleep
</UL>

<P><STRONG><a name="[3fb]"></a>GetGpsOnTimEnRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>SetGpsOffTimSlot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>SetGpsOffTimFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>GetGpsOffTim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsOffTimeout
</UL>

<P><STRONG><a name="[20b]"></a>GetGpsWakeupSta</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOnTim
</UL>

<P><STRONG><a name="[3fe]"></a>GetGpsPowerSta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>ResetGps5minLngOpenEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>GetGps5minLngOpenEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>SetGpsUnfix1hPeriodTimFrame</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>

<P><STRONG><a name="[20e]"></a>SetGpsUnfix1hPeriodTimSlot</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
</UL>

<P><STRONG><a name="[213]"></a>GetGpsUnfix1hPeriodTim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsUnfix1hPeriodTimeout
</UL>

<P><STRONG><a name="[401]"></a>SetGpsUnfixLonOpenFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>ResetGpsUnfixLonOpenFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>GetGpsUnfixLonOpenFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>SetGpsUnfix1hLngOpenFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>ResetGpsUnfix1hLngOpenFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>GetGpsUnfix1hLngOpenFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>SetGpsUnfixBey1hLngOpenFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>ResetGpsUnfixBey1hLngOpenFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>GetGpsUnfixBey1hLngOpenFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>IsGpsOffTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOffTim
</UL>

<P><STRONG><a name="[211]"></a>IsGpsOnTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOnTim
</UL>

<P><STRONG><a name="[212]"></a>IsGpsUnfix1hPeriodTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpsctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsUnfix1hPeriodTim
</UL>

<P><STRONG><a name="[40a]"></a>GetGpsOnEnRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>GetGpsOnEn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>SetGpsOnEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>ResetGpsOnEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>SetGpsOffPositionSampleEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>ResetGpsOffPositionSampleEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>GetGpsOffPositionSampleEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>ResetGpsPositionSampleNewFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>GetGpsPositionSampleNewFlgRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>GetGpsSaveFlgRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>GetGpsSaveFlg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>SetGpsSaveFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>ResetGpsSaveFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>GetGpsPPSGenFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>GetGpsMsgGenFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>GetGpsCtrlState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>IsCoordinateOK</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>IsPdopOK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpsctrl.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>GPS_GpsSelfCheckStructInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[216]"></a>GPS_GpsSelfCheckReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpsctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
</UL>

<P><STRONG><a name="[214]"></a>GPS_SelfCheck</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, gpsctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPS_SelfCheck &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_GetCheckSelectValue
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GpsSelfCheckReset
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GpsSelfCheckStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[218]"></a>Parameter_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, initial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Parameter_Init &rArr; IniEEPROM_Para &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpsCell
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ModuleInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_ModuleInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_ModuleInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_ModuleInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_ModuleInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ModuleInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF1_RFInstanceInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaLEDCtrlPara
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxTestStruct
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRtcTimPhaseStruct
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRtcParaStruct
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRtcPara
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerStru
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniSleepCtrlPara
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniGpsPara
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimAdjust
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_ModuleInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_ModuleInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVINFO_ModuleInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_ModuleInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_ModuleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[225]"></a>InitaLEDPara</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitaLEDPara
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaLEDCtrlPara
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[21a]"></a>InitaLEDCtrlPara</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitaLEDCtrlPara &rArr; InitaLEDPara
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaLEDPara
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[226]"></a>LEDAllDown</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDAllDown &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpLedCtrl
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[203]"></a>LEDInit</STRONG> (Thumb, 1126 bytes, Stack size 64 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LEDInit &rArr; InitaLEDCtrlPara &rArr; InitaLEDPara
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDAllDown
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaLEDPara
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaLEDCtrlPara
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTestCtrl
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTestSendMsg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_LEDCtrl
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestStop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestLedInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsWakeUp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsPowerUp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[227]"></a>LEDAllLight</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDAllLight &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpLedCtrl
</UL>

<P><STRONG><a name="[228]"></a>LedCtrl</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedCtrl &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDReadFileProcess
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCtrlProcess
</UL>

<P><STRONG><a name="[229]"></a>LEDCtrlProcess</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEDCtrlProcess &rArr; LedCtrl &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>LEDReadFileProcess</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ledctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 246 bytes, Stack size 144 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = main &rArr; GetCOMMMess &rArr; UartMsgProcess &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgPort
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgRxFifoPortIn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstPacketProbeProcess
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalClockCtrlMainProcess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GetCOMMMess
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_UBXPrtCommCtrlProcess
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestCtrl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstSelfCheckProcess
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GetRssi
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Work_Process
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOMMMess
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCtrlProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[41c]"></a>InitPowerUppara</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, powerup.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>PowerUpLedCtrl</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, powerup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PowerUpLedCtrl &rArr; LEDAllLight &rArr; IO_Ctrl &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDAllLight
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDAllDown
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[41d]"></a>InitBKP_DRPara</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, powerup.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>PowerUpProcess</STRONG> (Thumb, 1216 bytes, Stack size 168 bytes, powerup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = PowerUpProcess &rArr; Parameter_Init &rArr; IniEEPROM_Para &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_CloseTimeSave
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_OpenTimeSave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerCtrl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_SysClock_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_WakeUpPinCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTANDBYMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcAlarm
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBKP_DRData
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBKP_DR
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBKP_DRData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpLedCtrl
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[242]"></a>CalcuSleepSlots_Wakeup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, powerup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[41e]"></a>CalcuSleepPhases_Wakeup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, powerup.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>IniSleepCtrlPara</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sleepctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[5e]"></a>SaveBKP_DRPara</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleepctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandbyMod
</UL>

<P><STRONG><a name="[244]"></a>GetMcuWakeupTim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleepctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMcuWakeupTimeout
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Sleep
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepPhases_Sleep
</UL>

<P><STRONG><a name="[243]"></a>CalcuSleepPhases_Sleep</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sleepctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcuSleepPhases_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhaseNum
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuWakeupTim
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOnTimEn
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOnTim
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
</UL>

<P><STRONG><a name="[247]"></a>CalcuSleepSpan</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sleepctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalcuSleepSpan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepPhases_Sleep
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcClockSourceLSE
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
</UL>

<P><STRONG><a name="[248]"></a>CalcuSleepSlots_Sleep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sleepctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuWakeupTim
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOnTimEn
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsOnTim
</UL>

<P><STRONG><a name="[249]"></a>IsMcuWakeupTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sleepctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuWakeupTim
</UL>

<P><STRONG><a name="[24a]"></a>SetMcuWakeupSlot</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sleepctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
</UL>

<P><STRONG><a name="[24b]"></a>SetMcuWakeupFrame</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sleepctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>

<P><STRONG><a name="[24c]"></a>SetUsartFlg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sleepctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetUsartFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[41f]"></a>ResetUsartFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleepctrl.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>GetUsartFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sleepctrl.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>GetUsartFlgRst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sleepctrl.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>TEST_TxTestLedInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, testing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TEST_TxTestLedInit &rArr; LEDInit &rArr; InitaLEDCtrlPara &rArr; InitaLEDPara
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
</UL>

<P><STRONG><a name="[24e]"></a>TEST_TxTestInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, testing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TEST_TxTestInit &rArr; TEST_TxTestLedInit &rArr; LEDInit &rArr; InitaLEDCtrlPara &rArr; InitaLEDPara
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCtrl
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstSetTxTestFlg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestLedInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestSetTxSignalType
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestSetTxChannel
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTransceiverTestStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[253]"></a>TEST_TxTestStop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, testing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TEST_TxTestStop &rArr; LEDInit &rArr; InitaLEDCtrlPara &rArr; InitaLEDPara
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_StateTo
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerDown
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTransceiverTestStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[223]"></a>InitRxTestStruct</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testing.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[256]"></a>IniTestingPara</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, testing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IniTestingPara
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniTesting
</UL>

<P><STRONG><a name="[257]"></a>IniTesting</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IniTesting &rArr; IniTestingPara
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniTestingPara
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[422]"></a>ResetTesting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>Testing_LEDCtrl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing
</UL>

<P><STRONG><a name="[275]"></a>Testing_SetTestType</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, testing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Testing_SetTestType
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[423]"></a>GMSKTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>Testing_ModTest</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, testing.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTestSendMsg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_TestMain
</UL>

<P><STRONG><a name="[259]"></a>Testing_TestMain</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_ModTest
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing
</UL>

<P><STRONG><a name="[25b]"></a>Testing</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_TestMain
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_LEDCtrl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
</UL>

<P><STRONG><a name="[25d]"></a>GetMsgTestCtrlWakeupFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTestCtrlLowFreq
</UL>

<P><STRONG><a name="[25c]"></a>BatteryTestCtrlLowFreq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStopMod
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgTestCtrlWakeupFlag
</UL>

<P><STRONG><a name="[25e]"></a>InitBatteryTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>

<P><STRONG><a name="[25f]"></a>BatteryTestSendMsg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_ModTest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[260]"></a>BattertTestClock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
</UL>

<P><STRONG><a name="[424]"></a>SetBatteryTestTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>GetBattertTestTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>InitMsgTestCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>InitSleepTestCtrl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>SleepTestCtrl</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, testing.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
</UL>

<P><STRONG><a name="[428]"></a>InitMsgTestPara</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>InitMsgTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>DigDealMain_MsgTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testing.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>IniUartMsgPara</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartmsg.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>GetString</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, uartmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSegment
</UL>

<P><STRONG><a name="[262]"></a>IsAscStringOk</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uartmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsAscStringOk
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[263]"></a>IsHexStringOk</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBcdToByte
</UL>

<P><STRONG><a name="[264]"></a>IsVersionString</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uartmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsVersionString
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[265]"></a>ConvertBcdToByte</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHexStringOk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[266]"></a>ConvertByteToBcd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[13e]"></a>GetSegment</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uartmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSegment &rArr; GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsOutputProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[268]"></a>SartMmsiFormCheck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[269]"></a>IsLatFormat</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[26a]"></a>IsLonFormat</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[26b]"></a>ToLatFormat</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>

<P><STRONG><a name="[26c]"></a>ToLonFormat</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, uartmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>

<P><STRONG><a name="[26d]"></a>UartMsgProcess</STRONG> (Thumb, 8916 bytes, Stack size 432 bytes, uartmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = UartMsgProcess &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCtrl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_SetTestType
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniTesting
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestStop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GetRssi
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxTestStruct
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsSleepSta
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVINFO_InstResetGpsOutputCnt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSegment
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCry
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstSelfCheckStructInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstSelfCheckStart
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstCfgCheckSelect
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SetSi446xPaPwrLvl
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_REQUEST_DEVICE_STATE
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GetSi446xPaPwrLvl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CHANGE_STATE
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceID
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCry
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAllData
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVersionString
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAscStringOk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOMMMess
</UL>

<P><STRONG><a name="[280]"></a>UBX1_UBXPrtCommInstanceInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommStructInit
</UL>

<P><STRONG><a name="[281]"></a>UBX1_UBXPrtCommInstanceReset</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxFIFOStructInit
</UL>

<P><STRONG><a name="[282]"></a>UBX1_UBXPrtMsgSendBuff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtMsgSendBuff
</UL>

<P><STRONG><a name="[42c]"></a>UBX1_SetSendFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>UBX1_ResetSendFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>UBX_UartTxUbxMsg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UBX_UartTxUbxMsg &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxDataBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartResponseUbxMsg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommCtrlProcess
</UL>

<P><STRONG><a name="[287]"></a>UBX_UartMsgCheckSum</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UBX_UartMsgCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartResponseUbxMsg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GetReceivedUbxMess
</UL>

<P><STRONG><a name="[286]"></a>UBX_UartResponseUbxMsg</STRONG> (Thumb, 80 bytes, Stack size 120 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UBX_UartResponseUbxMsg &rArr; UBX_UartTxUbxMsg &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartMsgCheckSum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartTxUbxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommCtrlProcess
</UL>

<P><STRONG><a name="[232]"></a>UBX1_UBXPrtCommCtrlProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UBX1_UBXPrtCommCtrlProcess &rArr; UBX_UBXPrtCommCtrlProcess &rArr; UBX_UartResponseUbxMsg &rArr; UBX_UartTxUbxMsg &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommCtrlProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[289]"></a>UBX_UartRxProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UBX_UartRxProcess &rArr; UBX_MsgRxProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_MsgRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
</UL>

<P><STRONG><a name="[231]"></a>UBX_GetCOMMMess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UBX_GetCOMMMess &rArr; UBX_GetReceivedUbxMess &rArr; UBX_MsgDealProcess &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GetReceivedUbxMess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c]"></a>UBX1_GpsStartupConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtMsgSendBuff
</UL>

<P><STRONG><a name="[28d]"></a>UBX1_GpsIdleConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GpsIdleConfig
</UL>

<P><STRONG><a name="[290]"></a>UBX1_GpsNormalConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GpsNormalConfig
</UL>

<P><STRONG><a name="[42e]"></a>UBX1_GetSendRequireFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>UBX1_GetGpsCommSleepSta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ubloxprotocol.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>UBX_ModuleInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UBX_ModuleInit &rArr; UBX_GpsNormalConfig &rArr; UBX_UBXPrtMsgSendBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GpsNormalConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[292]"></a>TRCTRL_InstTransceiverTxCtrlStructInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transceiverctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransceiverTxCtrlStructInit
</UL>

<P><STRONG><a name="[24f]"></a>TRCTRL_InstTransceiverTestStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransceiverTestStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestStop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
</UL>

<P><STRONG><a name="[430]"></a>TRCTRL_InstTxSetTxDoneFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, transceiverctrl.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>TRCTRL_InstTxGetTxFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, transceiverctrl.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>TRCTRL_InstTxTestGetSignalBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TRCTRL_InstTxTestGetSignalBit &rArr; TRCTRL_TxTestGetSignalBit
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestGetSignalBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>

<P><STRONG><a name="[299]"></a>TRCTRL_InstTxGetSignalBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transceiverctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxGetSignalBit
</UL>

<P><STRONG><a name="[29b]"></a>TRCTRL_InstGetTxTestFlg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_GetTxTestFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>

<P><STRONG><a name="[252]"></a>TRCTRL_InstSetTxTestFlg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
</UL>

<P><STRONG><a name="[250]"></a>TRCTRL_InstTxTestSetTxSignalType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
</UL>

<P><STRONG><a name="[251]"></a>TRCTRL_InstTxTestSetTxChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestInit
</UL>

<P><STRONG><a name="[29d]"></a>TRCTRL_TxTestCtrl</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TRCTRL_TxTestCtrl &rArr; TRCTRL_TxTestCfgInit &rArr; SI446X_TxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_StateTo
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerDown
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerOn
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCfgInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestCtrl
</UL>

<P><STRONG><a name="[235]"></a>TRCTRL_InstTxTestCtrl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TRCTRL_InstTxTestCtrl &rArr; TRCTRL_TxTestCtrl &rArr; TRCTRL_TxTestCfgInit &rArr; SI446X_TxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a0]"></a>TRCTRL_InstTxTestIsTx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestIsTx
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>

<P><STRONG><a name="[1de]"></a>TRCTRL_TransmitProcess</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TRCTRL_TransmitProcess &rArr; SI446X_RxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstFrameTxFifoDeque
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCtrl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhaseNum
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisMain
</UL>

<P><STRONG><a name="[2a5]"></a>TRCTRL_TxDataClockISR</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRCTRL_TxDataClockISR &rArr; RF_PowerDown &rArr; SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerDown
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhaseNum
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerOn
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxGetSignalBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
</UL>

<P><STRONG><a name="[222]"></a>TRCTRL_ModuleInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRCTRL_ModuleInit
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransceiverTestStructInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransceiverTxCtrlStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[277]"></a>SLFCHK_InstSelfCheckStructInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[2aa]"></a>SLFCHK_GetBitNum32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstGetCheckResultValue
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_GetCheckSelect
</UL>

<P><STRONG><a name="[2a9]"></a>SLFCHK_InstGetCheckResultValue</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, selfcheck.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_GetBitNum32
</UL>

<P><STRONG><a name="[278]"></a>SLFCHK_InstCfgCheckSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[432]"></a>SLFCHK_InstSetCheckSelect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, selfcheck.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>SLFCHK_InstResetCheckSelect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, selfcheck.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>SLFCHK_InstSetCheckResultValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, selfcheck.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>SLFCHK_InstResetCheckResultValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, selfcheck.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>SLFCHK_InstSelfCheckStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[22f]"></a>SLFCHK_InstSelfCheckProcess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = SLFCHK_InstSelfCheckProcess &rArr; SLFCHK_SelfCheckProcess &rArr; RFL_SelfCheck &rArr; SendMsg18Test &rArr; InitMsg18Test &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[217]"></a>SLFCHK_GetCheckSelectValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
</UL>

<P><STRONG><a name="[2af]"></a>RFL_RfLinkSelfCheckStructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rflinkselfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[2b5]"></a>RFL_RfLinkSelfCheckReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rflinkselfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
</UL>

<P><STRONG><a name="[2b3]"></a>RFL_SelfCheck</STRONG> (Thumb, 216 bytes, Stack size 168 bytes, rflinkselfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = RFL_SelfCheck &rArr; SendMsg18Test &rArr; InitMsg18Test &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18Test
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListGetElem
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_RfLinkSelfCheckReset
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_RfLinkSelfCheckStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[2b9]"></a>TASK_TaskTimStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, taskmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ModuleInit
</UL>

<P><STRONG><a name="[204]"></a>TASK_TaskTimEnable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, taskmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TASK_TaskTimEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ModuleInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
</UL>

<P><STRONG><a name="[436]"></a>TASK_TaskTimDisable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, taskmanager.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TASK_PeriodTaskIsTimeout</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, taskmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TASK_PeriodTaskIsTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
</UL>

<P><STRONG><a name="[2b7]"></a>TASK_SingleTaskIsTimeout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, taskmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
</UL>

<P><STRONG><a name="[234]"></a>TASK_TaskProcess</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, taskmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TASK_TaskProcess &rArr; Para_CloseTimeSave &rArr; Para_Save &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_CloseTimeSave
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_InstRecStationQuantityUpdate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PeriodTaskIsTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>TASK_ModuleInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, taskmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TASK_ModuleInit &rArr; TASK_TaskTimEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskTimEnable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskTimStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[2c5]"></a>FLASH_ReadHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flashctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadCry
</UL>

<P><STRONG><a name="[2ba]"></a>U8ToU16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = U8ToU16
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[a0]"></a>FlashWrite</STRONG> (Thumb, 352 bytes, Stack size 312 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromChkSum
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8ToU16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[2c0]"></a>STM32_FLASH_DefaultRead</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STM32_FLASH_DefaultRead &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>

<P><STRONG><a name="[2c1]"></a>U16ToU8</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = U16ToU8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>

<P><STRONG><a name="[9d]"></a>FlashRead</STRONG> (Thumb, 310 bytes, Stack size 120 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FlashRead &rArr; STM32_FLASH_DefaultRead &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromChkSum
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U16ToU8
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_FLASH_DefaultRead
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[363]"></a>Decode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
</UL>

<P><STRONG><a name="[272]"></a>ReadDeviceID</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadDeviceID &rArr; SI446X_PART_INFO &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_FUNC_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[2c4]"></a>FlashReadCry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashReadCry
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCry
</UL>

<P><STRONG><a name="[274]"></a>ReadCry</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadCry &rArr; FlashReadCry
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIS_Cal_CRC16
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadCry
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[2c6]"></a>FlashWriteCry</STRONG> (Thumb, 166 bytes, Stack size 232 bytes, encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FlashWriteCry &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCry
</UL>

<P><STRONG><a name="[273]"></a>WriteCry</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WriteCry &rArr; FlashWriteCry &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIS_Cal_CRC16
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[2c7]"></a>GPIO5_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO5_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[2c9]"></a>GPIO6_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO6_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[2ca]"></a>GPIO7_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO7_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[6c]"></a>I2C_EE_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_EE_Init &rArr; GPIO7_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO7_Configuration
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO6_Configuration
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[2cc]"></a>I2C_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 24c02.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[2cb]"></a>I2C_Start</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWriteSelfCheck
</UL>

<P><STRONG><a name="[2cd]"></a>I2C_Stop</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWriteSelfCheck
</UL>

<P><STRONG><a name="[2ce]"></a>I2C_Ack</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[2cf]"></a>I2C_NoAck</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[2d0]"></a>I2C_WaitAck</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWriteSelfCheck
</UL>

<P><STRONG><a name="[2d1]"></a>I2C_SendByte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWriteSelfCheck
</UL>

<P><STRONG><a name="[2d2]"></a>I2C_ReceiveByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[95]"></a>I2C_EE_BufferWrite</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_EE_BufferWrite &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SelfCheck
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAllData
</UL>

<P><STRONG><a name="[271]"></a>EraseAllData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EraseAllData &rArr; I2C_EE_BufferWrite &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[99]"></a>I2C_EE_BufferRead</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_EE_BufferRead &rArr; I2C_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SelfCheck
</UL>

<P><STRONG><a name="[2d3]"></a>I2C_EE_BufferWriteSelfCheck</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_EE_BufferWriteSelfCheck &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SelfCheck
</UL>

<P><STRONG><a name="[2b0]"></a>EEPROM_SelfCheck</STRONG> (Thumb, 140 bytes, Stack size 36 bytes, 24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EEPROM_SelfCheck &rArr; I2C_EE_BufferWrite &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWriteSelfCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[2ac]"></a>EEPROM_EepromSelfCheckStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, 24c02.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[2e3]"></a>ADC1_ValInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[2d4]"></a>ADC1_RegInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[437]"></a>SetADC1_CalValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>ADC1_Calibration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[2db]"></a>DMA_PerInit</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[2df]"></a>ADC1_PerInit</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PerInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Calibration
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_ValInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[438]"></a>SetADC1_ConvFinishFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>DMA_ADC1_ISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ADC1_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[2e8]"></a>ADC1Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[85]"></a>ADC1IntProcess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[439]"></a>GetADC1_14_Val</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>ResetADC1_ConvFinishFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[43b]"></a>GetADC1_ConvFinishFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>GetADC1_CalValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>InitBKP_DRData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bkpregister.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[5f]"></a>SaveBKP_DRData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bkpregister.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandbyMod
</UL>

<P><STRONG><a name="[240]"></a>GetBKP_DRData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bkpregister.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetBKP_DRData &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[239]"></a>InitBKP_DR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bkpregister.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitBKP_DR &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[241]"></a>IsRtcAlarm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bkpregister.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRtcAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[43d]"></a>SetBKPDRDataBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bkpregister.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>GetBKPDRDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bkpregister.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>SetDAC2Val</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RegInit
</UL>

<P><STRONG><a name="[2f0]"></a>DAC_RegInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAC2Val
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2f3]"></a>SetDAC1Val</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerDown
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerOn
</UL>

<P><STRONG><a name="[1e9]"></a>GetTimCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1ea]"></a>GetRtcCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1eb]"></a>GetTimCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1ec]"></a>GetRtcCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1e8]"></a>GetTimSaveState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[1e6]"></a>ResetTimSaveState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[88]"></a>Usart2Interrupt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usart2Interrupt &rArr; UartTxIntProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntProcess
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxProcess
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>Exti1_Int</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Exti1_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsPowerupProtect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsFix
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>InitGPSPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitGPSPower &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
</UL>

<P><STRONG><a name="[2fe]"></a>EXTI_Configuration</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
</UL>

<P><STRONG><a name="[301]"></a>InitUsart2</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitUsart2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPSPower
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommStruc
</UL>

<P><STRONG><a name="[91]"></a>SetGpsPulseEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
</UL>

<P><STRONG><a name="[8e]"></a>ResetGpsPulseEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GpsIdleConfig
</UL>

<P><STRONG><a name="[43f]"></a>InitPinPulse</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>PinPulseDown</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[69]"></a>InitiaLED</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitiaLED &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[306]"></a>InitTestIO</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[21e]"></a>InitPowerStru</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[221]"></a>RF1_RFInstanceInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[440]"></a>RF1_GetRFAntState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>RF_PowerDown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_PowerDown &rArr; SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAC1Val
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_RFPower
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestStop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
</UL>

<P><STRONG><a name="[6d]"></a>Initia_RFPower</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Initia_RFPower &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerDown
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[29f]"></a>RF_PowerOn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_PowerOn &rArr; SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAC1Val
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
</UL>

<P><STRONG><a name="[307]"></a>Exti15_10_Int_PowerKey</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[308]"></a>Exti15_10_Int_SosKey</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[441]"></a>GetSosLowPowerSta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>GetPowerLowPowerSta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>InitPowerCtrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[1f0]"></a>CalcRtcPhaseAdjust</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalcRtcPhaseAdjust &rArr; usart_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcClockSourceLSE
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransPhaseAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[21c]"></a>InitRtcPara</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[30a]"></a>ResetRtcCount</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>

<P><STRONG><a name="[66]"></a>RTCConfigurationPart1</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTCConfigurationPart1 &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[1e3]"></a>RTCConfigurationPart2</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTCConfigurationPart2 &rArr; RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcClockSourceLSE
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
</UL>

<P><STRONG><a name="[8b]"></a>RTCAlarmInt</STRONG> (Thumb, 1672 bytes, Stack size 48 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTCAlarmInt &rArr; CalcuSleepSpan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsPowerupProtect
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcClockSourceLSE
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>InitRtcParaStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[220]"></a>InitRtcTimPhaseStruct</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>

<P><STRONG><a name="[2b2]"></a>RTC_SelfCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[2ae]"></a>RTC_RtcSelfCheckStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[a5]"></a>RxTxSwitch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rxtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxTxSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCtrl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxTx
</UL>

<P><STRONG><a name="[6e]"></a>InitRxTx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rxtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitRxTx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxSwitch
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[317]"></a>SPI2_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[31b]"></a>SPI2_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>

<P><STRONG><a name="[31f]"></a>GPIO_SPI1_ExchangeByte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SPI1_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>

<P><STRONG><a name="[321]"></a>GPIO_SPI2_ExchangeByte</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>

<P><STRONG><a name="[443]"></a>SetTimAdjust1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>SetTimAdjust10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[445]"></a>SetTimAdjust100</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>TransPhaseAdjust</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TransPhaseAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimPhaseAdjust
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRtcPhaseAdjust
</UL>

<P><STRONG><a name="[1ef]"></a>CalcTimPhaseAdjust</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalcTimPhaseAdjust &rArr; usart_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransPhaseAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
</UL>

<P><STRONG><a name="[322]"></a>InitTim2Para</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[446]"></a>InitTim2Para_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>InitTim2</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitTim2 &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2Para
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[86]"></a>Tim2Interrupt</STRONG> (Thumb, 1050 bytes, Stack size 32 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Tim2Interrupt &rArr; PTT_Timer_Service &rArr; PTT_TX_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsPowerupProtect
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Timer_Service
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_InstClockCount
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Start
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[246]"></a>GetPhaseNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepPhases_Sleep
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
</UL>

<P><STRONG><a name="[130]"></a>GetSlotNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattertTestClock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryTest
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuWakeupSlot
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpsUnfix1hPeriodTimSlot
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18Test
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6Test
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg7
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg13
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg12
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg8
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg14
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg19
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24A
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg5
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ScheduleDual
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_IsSenQueFull
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
</UL>

<P><STRONG><a name="[131]"></a>GetFrameNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryTest
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuWakeupFrame
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpsUnfix1hPeriodTimFrame
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18Test
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6Test
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg7
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg13
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg12
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg8
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg14
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg19
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24A
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg5
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ScheduleDual
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLOT_UpdateSlotMapIndexFrame
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_IsSenQueFull
</UL>

<P><STRONG><a name="[be]"></a>GetSlotSum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMcuWakeupTimeout
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Sleep
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepPhases_Sleep
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsUnfix1hPeriodTimeout
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsOnTimeout
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsOffTimeout
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsWakeupSta
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlotTimer
</UL>

<P><STRONG><a name="[337]"></a>SetSlotTimer</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
</UL>

<P><STRONG><a name="[447]"></a>ResetTimeCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>SetFSKDataXmtEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[449]"></a>ResetFSKDataXmtEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>GetFSKDataXmtEn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>GetFSKDataXmtSleepState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>SetFetchFirstFskDataEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[44d]"></a>ResetFetchFirstFskDataEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>GetFetchFirstFskDataEn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>USART1_UsartConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_UsartConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommStruc
</UL>

<P><STRONG><a name="[2fa]"></a>UartTxIntProcess</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartTxIntProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[2f9]"></a>UartRxProcess</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[87]"></a>Usart1Interrupt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Usart1Interrupt &rArr; UartTxIntProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUsartFlg
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntProcess
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxProcess
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[339]"></a>InitUsart1</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitUsart1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommStruc
</UL>

<P><STRONG><a name="[33a]"></a>Usart1_UsartConfig</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>

<P><STRONG><a name="[33b]"></a>UartTxFIFOStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommStruc
</UL>

<P><STRONG><a name="[27f]"></a>UartRxFIFOStructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommStruc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_UBXPrtCommInstanceReset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommStructInit
</UL>

<P><STRONG><a name="[6a]"></a>InitCommStruc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = InitCommStruc &rArr; InitUsart2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxFIFOStructInit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_UsartConfigStructInit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxFIFOStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[33d]"></a>UartTxMainProcess</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxDataBuf
</UL>

<P><STRONG><a name="[285]"></a>UartTxDataBuf</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxMainProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartTxUbxMsg
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxString
</UL>

<P><STRONG><a name="[44f]"></a>TXbufIsEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>GetCOMMMess</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = GetCOMMMess &rArr; UartMsgProcess &rArr; FlashWrite &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMsgProcess
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgCheckSum
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAscII
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Initia_wdg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Initia_wdg
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[22c]"></a>Feed_Dog</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wdg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpLedCtrl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[344]"></a>GPIOSPI_InstanceInit</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gpiospi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[345]"></a>GPIOSPI_InstWaitClockPeriod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpiospi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_WaitClockPeriod
</UL>

<P><STRONG><a name="[450]"></a>GPIOSPI_InstResetClockCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpiospi.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>GPIOSPI_InstClockCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpiospi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[349]"></a>GPIOSPI_InstSendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpiospi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_SendData
</UL>

<P><STRONG><a name="[34a]"></a>SI446X_CalcRfChannelStep</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_CalcRfChannelStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>

<P><STRONG><a name="[350]"></a>SI446X_CalcIFFreq</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>

<P><STRONG><a name="[34b]"></a>SI446X_CalcRfOffset</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_CalcRfOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>

<P><STRONG><a name="[34c]"></a>SI446X_CalcRfDeviation</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_CalcRfDeviation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>

<P><STRONG><a name="[34d]"></a>SI446X_CalcRfFreqFractional</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_CalcRfFreqFractional &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>

<P><STRONG><a name="[34f]"></a>SI446X_CalcRfFreqInteger</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>

<P><STRONG><a name="[34e]"></a>SI446X_SI446XStructInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SI446X_SI446XStructInit &rArr; SI446X_CalcRfFreqFractional &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqInteger
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcIFFreq
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
</UL>

<P><STRONG><a name="[351]"></a>SI446X_InitPowerPins</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SI446X_InitPowerPins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
</UL>

<P><STRONG><a name="[352]"></a>SI446X_Reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SI446X_Reset &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_InitPins
</UL>

<P><STRONG><a name="[353]"></a>SI446X_InitPins</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI446X_InitPins &rArr; SI446X_Reset &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
</UL>

<P><STRONG><a name="[354]"></a>SI446X_SPI_ExchangeByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI2_ExchangeByte
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI1_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadPacket
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SendPacket
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WRITE_TX_FIFO
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_NOP
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponseSelfCheck
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CmdSelfCheck
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
</UL>

<P><STRONG><a name="[355]"></a>SI446X_WaitCts</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadPacket
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponseSelfCheck
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CmdSelfCheck
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[356]"></a>SI446X_Cmd</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_FUNC_INFO
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_REQUEST_DEVICE_STATE
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CHANGE_STATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_FIFO_INFO
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PACKET_INFO
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SendPacket
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_PROPERTY_1
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_X
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_PROPERTY_X
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_INT_STATUS
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_IRCAL
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PatchInit
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_POWER_UP
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_MODEM_STATUS
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_TX
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GPIO_PIN_CFG
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_RX
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RX_FIFO_RESET
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TX_FIFO_RESET
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>

<P><STRONG><a name="[357]"></a>SI446X_SET_PROPERTY_1</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_SET_PROPERTY_1 &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgPN9Tx
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgCwTx
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SetSi446xPaPwrLvl
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_IQCalibration
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[270]"></a>SI446X_SetSi446xPaPwrLvl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_SetSi446xPaPwrLvl &rArr; SI446X_SET_PROPERTY_1 &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[27d]"></a>SI446X_GetSi446xPaPwrLvl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[358]"></a>SI446X_TX_FIFO_RESET</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI446X_TX_FIFO_RESET &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SendPacket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_RX
</UL>

<P><STRONG><a name="[359]"></a>SI446X_RX_FIFO_RESET</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI446X_RX_FIFO_RESET &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_RX
</UL>

<P><STRONG><a name="[35a]"></a>SI446X_START_RX</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SI446X_START_RX &rArr; SI446X_RX_FIFO_RESET &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RX_FIFO_RESET
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TX_FIFO_RESET
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_IQCalibration
</UL>

<P><STRONG><a name="[35b]"></a>SI446X_ReadResponse</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_FUNC_INFO
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_REQUEST_DEVICE_STATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_FIFO_INFO
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PACKET_INFO
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_PROPERTY_1
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_PROPERTY_X
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_INT_STATUS
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_MODEM_STATUS
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GPIO_PIN_CFG
</UL>

<P><STRONG><a name="[35c]"></a>SI446X_GPIO_PIN_CFG</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GpioPinCfg
</UL>

<P><STRONG><a name="[35d]"></a>SI446X_GpioPinCfg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GPIO_PIN_CFG
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[2a2]"></a>SI446X_RxCfg</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SI446X_RxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GpioPinCfg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
</UL>

<P><STRONG><a name="[35e]"></a>SI446X_START_TX</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_START_TX &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgPN9Tx
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgCwTx
</UL>

<P><STRONG><a name="[26f]"></a>SI446X_CHANGE_STATE</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI446X_CHANGE_STATE &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_StateTo
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgPN9Tx
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgCwTx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[2a4]"></a>SI446X_TxCfg</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SI446X_TxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CHANGE_STATE
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_TX
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GpioPinCfg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCfgInit
</UL>

<P><STRONG><a name="[2a6]"></a>SI446X_CfgCwTx</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI446X_CfgCwTx &rArr; SI446X_START_TX &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CHANGE_STATE
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_TX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCfgInit
</UL>

<P><STRONG><a name="[2a7]"></a>SI446X_CfgPN9Tx</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI446X_CfgPN9Tx &rArr; SI446X_START_TX &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CHANGE_STATE
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_TX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCfgInit
</UL>

<P><STRONG><a name="[451]"></a>SI446X_PAOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si446x.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>SI446X_PAOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si446x.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>SI446X_GET_MODEM_STATUS</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_GET_MODEM_STATUS &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GetRssi
</UL>

<P><STRONG><a name="[230]"></a>SI446X_GetRssi</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI446X_GetRssi &rArr; SI446X_GET_MODEM_STATUS &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GET_MODEM_STATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[255]"></a>SI446X_StateTo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_StateTo &rArr; SI446X_CHANGE_STATE &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CHANGE_STATE
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TxTestStop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
</UL>

<P><STRONG><a name="[453]"></a>SI446X_IsTxDone</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si446x.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>SI446X_A_TxRxClockIRQS</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI446X_A_TxRxClockIRQS &rArr; TRCTRL_TxDataClockISR &rArr; RF_PowerDown &rArr; SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIDecode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstBitStreamPutBit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestIsTx
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstGetTxTestFlg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestGetSignalBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>SI446X_B_TxRxClockIRQS</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI446X_B_TxRxClockIRQS &rArr; TRCTRL_TxDataClockISR &rArr; RF_PowerDown &rArr; SetDAC1Val &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIDecode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstBitStreamPutBit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestIsTx
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstGetTxTestFlg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestGetSignalBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[2c3]"></a>SI446X_FUNC_INFO</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_FUNC_INFO &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceID
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[2c2]"></a>SI446X_PART_INFO</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_PART_INFO &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceID
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[360]"></a>SI446X_POWER_UP</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_POWER_UP &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[361]"></a>SI446X_PatchInit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_PatchInit &rArr; SI446X_Cmd &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[362]"></a>SI446X_ConfigInit</STRONG> (Thumb, 1754 bytes, Stack size 24 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SI446X_ConfigInit &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_FUNC_INFO
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PatchInit
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_POWER_UP
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_GpioPinCfg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ModuleInit
</UL>

<P><STRONG><a name="[454]"></a>SI446X_SETFREBASE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si446x.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>SI446X_ModuleInit</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SI446X_ModuleInit &rArr; SI446X_RxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceID
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_InitPins
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_InitPowerPins
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SI446XStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[364]"></a>SI446X_CmdSelfCheck</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SI446X_CmdSelfCheck &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO_SelfCheck
</UL>

<P><STRONG><a name="[365]"></a>SI446X_IRCAL</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_IQCalibration
</UL>

<P><STRONG><a name="[366]"></a>SI446X_ReadResponseSelfCheck</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SI446X_ReadResponseSelfCheck &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO_SelfCheck
</UL>

<P><STRONG><a name="[367]"></a>SI446X_NOP</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_IQCalibration
</UL>

<P><STRONG><a name="[368]"></a>SI446X_PART_INFO_SelfCheck</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X_PART_INFO_SelfCheck &rArr; SI446X_ReadResponseSelfCheck &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponseSelfCheck
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CmdSelfCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SelfCheck
</UL>

<P><STRONG><a name="[27c]"></a>SI446X_REQUEST_DEVICE_STATE</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X_REQUEST_DEVICE_STATE &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[369]"></a>SI446X_GET_INT_STATUS</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[36a]"></a>SI446X_GET_PROPERTY_X</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[36b]"></a>SI446X_SET_PROPERTY_X</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[36c]"></a>SI446X_GET_PROPERTY_1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[36d]"></a>SI446X_IQCalibration</STRONG> (Thumb, 1430 bytes, Stack size 24 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_NOP
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_IRCAL
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_START_RX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SET_PROPERTY_1
</UL>

<P><STRONG><a name="[36e]"></a>SI446X_WRITE_TX_FIFO</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>

<P><STRONG><a name="[36f]"></a>SI446X_SendPacket</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TX_FIFO_RESET
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>

<P><STRONG><a name="[370]"></a>SI446X_ReadPacket</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SPI_ExchangeByte
</UL>

<P><STRONG><a name="[371]"></a>SI446X_PACKET_INFO</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[372]"></a>SI446X_FIFO_INFO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, si446x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
</UL>

<P><STRONG><a name="[2b1]"></a>SI446X_SelfCheck</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, si446x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SI446X_SelfCheck &rArr; SI446X_PART_INFO_SelfCheck &rArr; SI446X_ReadResponseSelfCheck &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_PART_INFO_SelfCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[2ad]"></a>SI446X_Si446xSelfCheckStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[3a1]"></a>SI446X_RXSTTUS_Return</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, si446x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
</UL>

<P><STRONG><a name="[373]"></a>UartTxString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxDataBuf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDebugMsg
</UL>

<P><STRONG><a name="[12e]"></a>usart_printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxString
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattertTestClock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryTest
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess_MsgTest
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimPhaseAdjust
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRtcPhaseAdjust
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[132]"></a>debug_printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxString
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotSynClac
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18Test
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6Test
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg7
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg13
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg12
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg8
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg14
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg19
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24A
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg5
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ScheduleDual
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_IsSenQueFull
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_MsgDealProcess
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtCommCtrlProcess
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ConfigInit
</UL>

<P><STRONG><a name="[375]"></a>UartDebugMsg</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgCheckSum
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxString
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[82]"></a>UartResponseMsg</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgCheckSum
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAscII
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxString
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTestCtrl
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTestSendMsg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsOutputProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenPrint
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[80]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[4f]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRtcInterrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[7f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[455]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2e0]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[457]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[2e4]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[458]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Calibration
</UL>

<P><STRONG><a name="[2d7]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Calibration
</UL>

<P><STRONG><a name="[2d8]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Calibration
</UL>

<P><STRONG><a name="[2d9]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Calibration
</UL>

<P><STRONG><a name="[2e9]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Start
</UL>

<P><STRONG><a name="[459]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[45c]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Calibration
</UL>

<P><STRONG><a name="[45d]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
</UL>

<P><STRONG><a name="[46b]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>ADC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>BKP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[46f]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBKP_DRData
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBKP_DR
</UL>

<P><STRONG><a name="[2eb]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBKP_DRData
</UL>

<P><STRONG><a name="[474]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>BKP_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>DAC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[2f1]"></a>DAC_Init</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_RFPower
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RegInit
</UL>

<P><STRONG><a name="[478]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>DAC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_RFPower
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RegInit
</UL>

<P><STRONG><a name="[479]"></a>DAC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAC1Val
</UL>

<P><STRONG><a name="[2ef]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAC2Val
</UL>

<P><STRONG><a name="[47d]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[47e]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>DBGMCU_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>DBGMCU_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>DBGMCU_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_DebugConfig
</UL>

<P><STRONG><a name="[481]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PerInit
</UL>

<P><STRONG><a name="[482]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PerInit
</UL>

<P><STRONG><a name="[2dd]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PerInit
</UL>

<P><STRONG><a name="[483]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>DMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>DMA_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC1_ISR
</UL>

<P><STRONG><a name="[2e7]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC1_ISR
</UL>

<P><STRONG><a name="[487]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
</UL>

<P><STRONG><a name="[488]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti1_Int
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti15_10_Int_SosKey
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti15_10_Int_PowerKey
</UL>

<P><STRONG><a name="[2fc]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti1_Int
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti15_10_Int_SosKey
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti15_10_Int_PowerKey
</UL>

<P><STRONG><a name="[79]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[48c]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[2bb]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
</UL>

<P><STRONG><a name="[48d]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
</UL>

<P><STRONG><a name="[48e]"></a>FLASH_LockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[37b]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[2bd]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
</UL>

<P><STRONG><a name="[37d]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[37e]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[37f]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[381]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[380]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[382]"></a>FLASH_ProgramWord</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2be]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
</UL>

<P><STRONG><a name="[383]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[384]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[385]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[386]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32f10x_flash_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[48f]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCry
</UL>

<P><STRONG><a name="[494]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash_1.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[388]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2c8]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Init_IO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_RFPower
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiaLED
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRxTx
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_InstanceInit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestIO
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPSPower
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RegInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_PerInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_RegInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO7_Configuration
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO6_Configuration
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Configuration
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_InitPins
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_InitPowerPins
</UL>

<P><STRONG><a name="[495]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_SendData
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI2_ExchangeByte
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI1_ExchangeByte
</UL>

<P><STRONG><a name="[496]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_TX_Control
</UL>

<P><STRONG><a name="[497]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxSwitch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Init_IO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_RFPower
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiaLED
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_InstanceInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_SendData
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI2_ExchangeByte
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI1_ExchangeByte
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SelfCheck
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerOn
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_TX_Control
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Warnlight_Control
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadPacket
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SendPacket
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WRITE_TX_FIFO
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_NOP
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponseSelfCheck
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CmdSelfCheck
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Reset
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_InitPowerPins
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxSwitch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ctrl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_B_TxRxClockIRQS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_A_TxRxClockIRQS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Init_IO
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerDown
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_InstanceInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_SendData
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI2_ExchangeByte
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SPI1_ExchangeByte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestIO
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinPulseDown
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SelfCheck
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_TX_Control
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Warnlight_Control
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadPacket
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SendPacket
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WRITE_TX_FIFO
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_NOP
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponseSelfCheck
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CmdSelfCheck
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_ReadResponse
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Cmd
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_WaitCts
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Reset
</UL>

<P><STRONG><a name="[498]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RxCfg
</UL>

<P><STRONG><a name="[49e]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_wdg
</UL>

<P><STRONG><a name="[340]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_wdg
</UL>

<P><STRONG><a name="[341]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_wdg
</UL>

<P><STRONG><a name="[342]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_wdg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Dog
</UL>

<P><STRONG><a name="[343]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initia_wdg
</UL>

<P><STRONG><a name="[49f]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[23b]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBKP_DRData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBKP_DR
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBKP_DRData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[4a0]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[5c]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStopMod
</UL>

<P><STRONG><a name="[23e]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[23c]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[23f]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[77]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[55]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[58]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
</UL>

<P><STRONG><a name="[56]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[4a2]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[57]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[59]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[5a]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[7b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[4a4]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[310]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
</UL>

<P><STRONG><a name="[1e1]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
</UL>

<P><STRONG><a name="[1e2]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClockChoice
</UL>

<P><STRONG><a name="[311]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
</UL>

<P><STRONG><a name="[76]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[51]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Configuration
</UL>

<P><STRONG><a name="[52]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Configuration
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[53]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart1
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[377]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[37a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[378]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[4a6]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
</UL>

<P><STRONG><a name="[4a8]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>RTC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
</UL>

<P><STRONG><a name="[30c]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[30f]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[2ed]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcAlarm
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[30d]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[312]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
</UL>

<P><STRONG><a name="[30e]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[4aa]"></a>RTC_GetDivider</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[2ec]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcAlarm
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCConfigurationPart2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRtcCount
</UL>

<P><STRONG><a name="[4ab]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[4ac]"></a>RTC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>RTC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
</UL>

<P><STRONG><a name="[316]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
</UL>

<P><STRONG><a name="[38a]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[318]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[38b]"></a>I2S_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[4ad]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[4af]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[4b0]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[31e]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[4b1]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4b8]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[4b9]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4ba]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4bb]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[323]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[325]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[327]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[329]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[4bc]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[392]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[391]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[38f]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[38d]"></a>TIM_ICInit</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[394]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[4bd]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[4c2]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[4c3]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[395]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[397]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[399]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[398]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[39a]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[324]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[4c7]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[328]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[32a]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTim2
</UL>

<P><STRONG><a name="[4d1]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d5]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>TIM_SelectOCxM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[333]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[336]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[4ed]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ee]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[332]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[335]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[4ef]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[32e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[39b]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[302]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_UsartConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
</UL>

<P><STRONG><a name="[4f4]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_UsartConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
</UL>

<P><STRONG><a name="[303]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxMainProcess
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_UsartConfig
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntProcess
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart2
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
</UL>

<P><STRONG><a name="[4f7]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxMainProcess
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntProcess
</UL>

<P><STRONG><a name="[2f7]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[4fd]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ff]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[501]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[506]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[2f6]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[2f8]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2Interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Interrupt
</UL>

<P><STRONG><a name="[507]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>NVIC_DeInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, migrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[60]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, migrate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandbyMod
</UL>

<P><STRONG><a name="[6f]"></a>PTT_Init_IO</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PTT_Init_IO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[70]"></a>PTT_OBJ_INIT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PTT_OBJ_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[39c]"></a>PTT_Warnlight_Control</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PTT_Warnlight_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Timer_Service
</UL>

<P><STRONG><a name="[3a0]"></a>PTT_WARNLIGHT_ENABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ptt_lnw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
</UL>

<P><STRONG><a name="[39d]"></a>PTT_TX_Control</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PTT_TX_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Timer_Service
</UL>

<P><STRONG><a name="[508]"></a>PTT_LowPower_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptt_lnw.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>PTT_MainPower_Check</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PTT_MainPower_Check &rArr; RxTxCtrl &rArr; RxTxSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCtrl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_WARNLIGHT_ENABLE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_RXSTTUS_Return
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Work_Process
</UL>

<P><STRONG><a name="[233]"></a>PTT_Work_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PTT_Work_Process &rArr; PTT_MainPower_Check &rArr; RxTxCtrl &rArr; RxTxSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_MainPower_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[331]"></a>PTT_Timer_Service</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ptt_lnw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PTT_Timer_Service &rArr; PTT_TX_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_TX_Control
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_Warnlight_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Interrupt
</UL>

<P><STRONG><a name="[170]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNextTmo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextTmo
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCandidateSlot
</UL>

<P><STRONG><a name="[a3]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
</UL>

<P><STRONG><a name="[509]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[50b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameNrziDecode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameNrziCode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameDataDepack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameDataPack1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameDataPack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBitDestuff
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBitStuff
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameCrcCheck
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTT_OBJ_INIT
</UL>

<P><STRONG><a name="[50d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[137]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildABK
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
</UL>

<P><STRONG><a name="[a2]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg24B
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg24A
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg19
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsg5
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[9f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLonFormat
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLatFormat
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SartMmsiFormCheck
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertByteToBcd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBcdToByte
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVersionString
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHexStringOk
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAscStringOk
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDebugMsg
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxString
</UL>

<P><STRONG><a name="[136]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildABK
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[a1]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_AisStaticInfoStructInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenDeque
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SenEnque
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[13d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsOutputProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[94]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Save
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_SentenceParse
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCry
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[276]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[9e]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperForCOG
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperForCOG
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Wakeup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperForCOG
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Wakeup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSelectIntervalOffset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_CalcSelectIntervalOffset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Wakeup
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[126]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[50e]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAisDynamicInfo
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSelectIntervalOffset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_CalcSelectIntervalOffset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Wakeup
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperForCOG
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSpan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSelectIntervalOffset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_CalcSelectIntervalOffset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfOffset
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSOG
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSleepSlots_Wakeup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimAdjustProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfFreqFractional
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfDeviation
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CalcRfChannelStep
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperForCOG
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
</UL>

<P><STRONG><a name="[50f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarmInt
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperForCOG
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAisDynamicInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[510]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3ad]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a7]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[511]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[512]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[513]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[4a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3a5]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3b1]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[3a6]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[514]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[515]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[3a9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[3b2]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[3b3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[516]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3b0]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[3b7]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[48]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3b6]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[517]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[518]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[519]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[97]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniEEPROM_Para
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_DefaultRead
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TaskProcess
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCtrlProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildABK
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_FLASH_DefaultRead
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLonFormat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToLatFormat
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDebugMsg
</UL>

<P><STRONG><a name="[51a]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[51b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3bb]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51c]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[51d]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[374]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDebugMsg
</UL>

<P><STRONG><a name="[51e]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3c0]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[3a3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[51f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3bc]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[3bd]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[3be]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[3bf]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[3c2]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3c3]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[3c4]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3c5]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[3c6]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3c1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[3cc]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[520]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[521]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[522]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3cb]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[3b8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[12a]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
</UL>

<P><STRONG><a name="[1fd]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealGpsMsg
</UL>

<P><STRONG><a name="[129]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
</UL>

<P><STRONG><a name="[bf]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
</UL>

<P><STRONG><a name="[bb]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuild
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TransmitProcess
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestSignalInit
</UL>

<P><STRONG><a name="[128]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
</UL>

<P><STRONG><a name="[127]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
</UL>

<P><STRONG><a name="[119]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAisDynamicInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[27a]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMsgProcess
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[64]"></a>RCC_Configuration</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f10x_target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_SysClock_Init
</UL>

<P><STRONG><a name="[72]"></a>NVIC_Configuration</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f10x_target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Periph_Init
</UL>

<P><STRONG><a name="[aa]"></a>DLS_BitStreamPutBit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLS_BitStreamPutBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamIsBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstBitStreamPutBit
</UL>

<P><STRONG><a name="[ae]"></a>DLS_BitStreamGetBit</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DLS_BitStreamGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstBitStreamGetBit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamFindFrameHeader
</UL>

<P><STRONG><a name="[af]"></a>DLS_BitStreamGetFrame</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLS_BitStreamGetFrame &rArr; DLS_BitStreamGetBitQuantity
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBitQuantity
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamNextFrameSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
</UL>

<P><STRONG><a name="[b3]"></a>DLS_FrameRxFifoEnque</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DLS_FrameRxFifoEnque
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_Inst2FrameRxFifoEnque
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_Inst1FrameRxFifoEnque
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
</UL>

<P><STRONG><a name="[b6]"></a>DLS_FrameRxFifoDeque</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLS_FrameRxFifoDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_Inst2FrameRxFifoDeque
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_Inst1FrameRxFifoDeque
</UL>

<P><STRONG><a name="[b8]"></a>DLS_PacketProbeProcess</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DLS_PacketProbeProcess &rArr; DLS_BitStreamGetFrame &rArr; DLS_BitStreamGetBitQuantity
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotSum
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamFindFrameTailer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamFindFrameHeader
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamIsBuffFull
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeStructInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameRxFifoEnque
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstPacketProbeProcess
</UL>

<P><STRONG><a name="[a9]"></a>DLS_PacketProbeStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_InstPacketProbeStructInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
</UL>

<P><STRONG><a name="[ab]"></a>DLS_BitStreamIsBuffFull</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamPutBit
</UL>

<P><STRONG><a name="[b1]"></a>DLS_BitStreamNextFrameSetup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetFrame
</UL>

<P><STRONG><a name="[b0]"></a>DLS_BitStreamGetBitQuantity</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLS_BitStreamGetBitQuantity
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBitNum
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamFindFrameTailer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetFrame
</UL>

<P><STRONG><a name="[b9]"></a>DLS_BitStreamFindFrameHeader</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLS_BitStreamFindFrameHeader &rArr; DLS_BitStreamGetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBitNum
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
</UL>

<P><STRONG><a name="[ba]"></a>DLS_BitStreamFindFrameTailer</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLS_BitStreamFindFrameTailer &rArr; DLS_BitStreamGetBitNum &rArr; DLS_BitStreamGetBitQuantity
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBitNum
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBitQuantity
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_PacketProbeProcess
</UL>

<P><STRONG><a name="[cf]"></a>DLS_BitStreamGetBitNum</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datalinkservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLS_BitStreamGetBitNum &rArr; DLS_BitStreamGetBitQuantity
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamGetBitQuantity
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamFindFrameTailer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_BitStreamFindFrameHeader
</UL>

<P><STRONG><a name="[d3]"></a>LME_BinMsgRxFifoEnque</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LME_BinMsgRxFifoEnque
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_Inst2BinMsgRxFifoEnque
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_Inst1BinMsgRxFifoEnque
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortIn
</UL>

<P><STRONG><a name="[d6]"></a>LME_BinMsgTxFifoEnque</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LME_BinMsgTxFifoEnque
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoPortIn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoEnque
</UL>

<P><STRONG><a name="[d8]"></a>LME_BinMsgRxFifoDeque</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LME_BinMsgRxFifoDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_Inst2BinMsgRxFifoDeque
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_Inst1BinMsgRxFifoDeque
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoPortOut
</UL>

<P><STRONG><a name="[db]"></a>LME_BinMsgTxFifoDeque</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LME_BinMsgTxFifoDeque
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgTxFifoPortOut
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgTxFifoDeque
</UL>

<P><STRONG><a name="[dc]"></a>LME_BinMsgRxFifoPortIn</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LME_BinMsgRxFifoPortIn &rArr; UartResponseMsg &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoEnque
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIS_Cal_CRC16
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_Inst2FrameRxFifoDeque
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_Inst1FrameRxFifoDeque
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgRxFifoPortIn
</UL>

<P><STRONG><a name="[de]"></a>LME_BinMsgRxFifoPortOut</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, linkmanagemententity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LME_BinMsgRxFifoPortOut &rArr; AISDI_BuildVDM &rArr; AISDI_SenEnque &rArr; AISDI_IsSenQueFull &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListInsert
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BuildVDM
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_BinMsgRxFifoDeque
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LME_InstBinMsgRxFifoPortOut
</UL>

<P><STRONG><a name="[eb]"></a>PHY_NRZIStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, physicallayer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIStructInit
</UL>

<P><STRONG><a name="[ed]"></a>PHY_NRZIDecodeStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, physicallayer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIDecodeStart
</UL>

<P><STRONG><a name="[ef]"></a>PHY_NRZIDecode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, physicallayer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_InstNRZIDecode
</UL>

<P><STRONG><a name="[121]"></a>rad</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ais_msgmodu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rad &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistance
</UL>

<P><STRONG><a name="[151]"></a>AISMSG_ParseMsg1_2</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg1_2 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[152]"></a>AISMSG_ParseMsg3</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg3 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[153]"></a>AISMSG_ParseMsg4_11</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg4_11 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[154]"></a>AISMSG_ParseMsg5</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg5 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[155]"></a>AISMSG_ParseMsg6</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AISMSG_ParseMsg6 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[156]"></a>AISMSG_ParseMsg7_13</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg7_13 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[157]"></a>AISMSG_ParseMsg8</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg8 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[158]"></a>AISMSG_ParseMsg9</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg9 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[159]"></a>AISMSG_ParseMsg12</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg12 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[15a]"></a>AISMSG_ParseMsg15</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg15 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[15b]"></a>AISMSG_ParseMsg16</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg16 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[15c]"></a>AISMSG_ParseMsg17</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg17 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[15d]"></a>AISMSG_ParseMsg18</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg18 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[15e]"></a>AISMSG_ParseMsg19</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg19 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[15f]"></a>AISMSG_ParseMsg20</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg20 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[160]"></a>AISMSG_ParseMsg21</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg21 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[161]"></a>AISMSG_ParseMsg22</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg22 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[162]"></a>AISMSG_ParseMsg23</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg23 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[163]"></a>AISMSG_ParseMsg24B</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg24B &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[164]"></a>AISMSG_ParseMsg25</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AISMSG_ParseMsg25 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[165]"></a>AISMSG_ParseMsg26</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AISMSG_ParseMsg26 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[166]"></a>AISMSG_ParseMsg27</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg27 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[169]"></a>AISMSG_ParseMsg10</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AISMSG_ParseMsg10 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[16a]"></a>AISMSG_ParseMsg14</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg14 &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[16b]"></a>AISMSG_ParseMsg24A</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, aismsgmodule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AISMSG_ParseMsg24A &rArr; bitmap_get_value &rArr; bitmap_get_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ParseMsg
</UL>

<P><STRONG><a name="[172]"></a>SOTDMA_SotdmaParaStructInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SOTDMA_SotdmaParaStructInit &rArr; SOTDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_CalcSelectIntervalOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedStructInit
</UL>

<P><STRONG><a name="[196]"></a>SOTDMA_SotdmaParaStructReset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOTDMA_SotdmaParaStructReset
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[197]"></a>SOTDMA_SotdmaParaStructCopy</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOTDMA_SotdmaParaStructCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[175]"></a>SOTDMA_GetAvailableNts</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SOTDMA_GetAvailableNts
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_IsAtSi
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[177]"></a>SOTDMA_IsSendTimArrived</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SOTDMA_IsSendTimArrived
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[190]"></a>SOTDMA_SetNextNs</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOTDMA_SetNextNs
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[17c]"></a>SOTDMA_GetNextTmo</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SOTDMA_GetNextTmo
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[17d]"></a>SOTDMA_GetSubMsg</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOTDMA_GetSubMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGpsFix
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_InstRecStationGetQuantity
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[182]"></a>TDMA_SendMsg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg18
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg1
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[186]"></a>SOTDMA_Schedule</STRONG> (Thumb, 1498 bytes, Stack size 56 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SOTDMA_Schedule &rArr; TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcCommStateSlotIncrement
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcCommStateNumberOfSlots
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcCommStateKeepFlag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_IsRrChanged
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNextTmo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextNts
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNextNts
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextNs
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetFirstNs
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNss
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_IsAtSi
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_FrameReportCntIncrease
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedStructInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SendMsg
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetSubMsg
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextTmo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNextNs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_IsSendTimArrived
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetAvailableNts
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaParaStructCopy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaParaStructReset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotValid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCandidateSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
</UL>

<P><STRONG><a name="[199]"></a>SOTDMA_ScheduleDual</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = SOTDMA_ScheduleDual &rArr; SOTDMA_Schedule &rArr; TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNssDual
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNextTmo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextNts
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNextNts
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextNs
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetFirstNs
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedDualStructInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetNextTmo
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotValid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCandidateSlot
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[19c]"></a>ITDMA_ItdmaParaStructInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ITDMA_ItdmaParaStructInit &rArr; ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSelectIntervalOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedStructInit
</UL>

<P><STRONG><a name="[19d]"></a>ITDMA_Schedule</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ITDMA_Schedule &rArr; TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcCommStateSlotIncrement
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcCommStateNumberOfSlots
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcCommStateKeepFlag
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedStructInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_SendMsg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotValid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotOffset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCandidateSlotFrame
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCandidateSlot
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ScheduleDual
</UL>

<P><STRONG><a name="[1a4]"></a>TDMA_TdmaSchedStructInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TDMA_TdmaSchedStructInit &rArr; ITDMA_ItdmaSchedDualStructInit &rArr; ITDMA_ItdmaSchedStructInit &rArr; ITDMA_ItdmaParaStructInit &rArr; ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedDualStructInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedDualStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_ModuleInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[1a6]"></a>TDMA_Schedule</STRONG> (Thumb, 708 bytes, Stack size 48 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = TDMA_Schedule &rArr; SOTDMA_ScheduleDual &rArr; SOTDMA_Schedule &rArr; TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsPowerupFixState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNssDual
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetRrDual
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ScheduleDual
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetSelectIntervalOffset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_SetNi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedDualStructInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetRr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedDualStructInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_TdmaSchedStructInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaParaStructCopy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_InstSchedule
</UL>

<P><STRONG><a name="[198]"></a>SOTDMA_SotdmaSchedStructInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SOTDMA_SotdmaSchedStructInit &rArr; SOTDMA_SotdmaParaStructInit &rArr; SOTDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaCtrlStructInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaParaStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedDualStructInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[19a]"></a>SOTDMA_SotdmaSchedDualStructInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SOTDMA_SotdmaSchedDualStructInit &rArr; SOTDMA_SotdmaSchedStructInit &rArr; SOTDMA_SotdmaParaStructInit &rArr; SOTDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaCtrlStructInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_TdmaSchedStructInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
</UL>

<P><STRONG><a name="[194]"></a>SOTDMA_FrameReportCntIncrease</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[174]"></a>SOTDMA_SetRr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SOTDMA_SetRr &rArr; SOTDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_CalcSelectIntervalOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetRrDual
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[176]"></a>SOTDMA_IsAtSi</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_GetAvailableNts
</UL>

<P><STRONG><a name="[17b]"></a>SOTDMA_SetNss</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SetNssDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[18b]"></a>SOTDMA_SetFirstNs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[18c]"></a>SOTDMA_GetNextNs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[18d]"></a>SOTDMA_SetNextNts</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[18e]"></a>SOTDMA_GetNextNts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOTDMA_GetNextNts
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[18f]"></a>SOTDMA_SetNextTmo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOTDMA_SetNextTmo
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_ScheduleDual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_Schedule
</UL>

<P><STRONG><a name="[19e]"></a>ITDMA_ItdmaSchedStructInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ITDMA_ItdmaSchedStructInit &rArr; ITDMA_ItdmaParaStructInit &rArr; ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaCtrlStructInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaParaStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedDualStructInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
</UL>

<P><STRONG><a name="[1a5]"></a>ITDMA_ItdmaSchedDualStructInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ITDMA_ItdmaSchedDualStructInit &rArr; ITDMA_ItdmaSchedStructInit &rArr; ITDMA_ItdmaParaStructInit &rArr; ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaCtrlStructInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ScheduleDual
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_TdmaSchedStructInit
</UL>

<P><STRONG><a name="[1a8]"></a>ITDMA_SetNi</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[1a9]"></a>ITDMA_SetSelectIntervalOffset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ITDMA_SetSelectIntervalOffset &rArr; ITDMA_CalcSelectIntervalOffset &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_CalcSelectIntervalOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[1aa]"></a>ITDMA_ScheduleDual</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, tdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ITDMA_ScheduleDual &rArr; ITDMA_Schedule &rArr; TDMA_SendMsg &rArr; SendMsg18 &rArr; InitMsg18 &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedDualStructInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_Schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDMA_Schedule
</UL>

<P><STRONG><a name="[1ae]"></a>SOTDMA_SotdmaCtrlStructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedDualStructInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOTDMA_SotdmaSchedStructInit
</UL>

<P><STRONG><a name="[1af]"></a>ITDMA_ItdmaCtrlStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedDualStructInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITDMA_ItdmaSchedStructInit
</UL>

<P><STRONG><a name="[1b1]"></a>AISINFO_AisStaticInfoStructInit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, aisinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AISINFO_AisStaticInfoStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISINFO_ModuleInit
</UL>

<P><STRONG><a name="[1b7]"></a>MSGMAN_MsgCellStructCopy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSGMAN_MsgCellStructCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListGetHead
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListInsert
</UL>

<P><STRONG><a name="[1b5]"></a>MSGMAN_MsgStaticListInsert</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSGMAN_MsgStaticListInsert &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListIsFull
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgCellStructCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListInsert
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListInsert
</UL>

<P><STRONG><a name="[1bd]"></a>MSGMAN_PeriodSchedule</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MSGMAN_PeriodSchedule &rArr; SendMsg5 &rArr; InitMsg5 &rArr; AISMSG_BuildMsg5 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg19
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24A
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg24B
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg5
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskIsSendTimExpired
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskNextTxCfg
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskTxCfg
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedStructInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsPowerupFixState
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSlotNum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFrameNum
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxProcess
</UL>

<P><STRONG><a name="[1da]"></a>MSGMAN_MsgStaticListStructInit</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSGMAN_MsgStaticListStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_ModuleInit
</UL>

<P><STRONG><a name="[1c0]"></a>MSGMAN_MsgStaticListGetHead</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSGMAN_MsgStaticListGetHead &rArr; MSGMAN_MsgCellStructCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListIsEmpty
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgCellStructCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListGetElem
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListGetElem
</UL>

<P><STRONG><a name="[1d7]"></a>MSGMAN_AisAckFifoEnque</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MSGMAN_AisAckFifoEnque
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgRxProcess
</UL>

<P><STRONG><a name="[1c7]"></a>MSGMAN_AisAckFifoDeque</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSGMAN_AisAckFifoDeque
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_AisAckFifoIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
</UL>

<P><STRONG><a name="[1cf]"></a>MSGMAN_BurstSchedule</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = MSGMAN_BurstSchedule &rArr; SendMsg12 &rArr; InitMsg12 &rArr; AISMSG_BuildMsg12 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg7
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg13
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg6
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg12
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg8
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg14
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_AisAckFifoIsEmpty
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_AisAckFifoDeque
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISMSG_ConvertToMsgType
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_BBMIsValid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISDI_ABMIsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxProcess
</UL>

<P><STRONG><a name="[1be]"></a>MSGMAN_PeriodSchedStructInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, msgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSGMAN_PeriodSchedStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgTxTaskStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_ModuleInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedule
</UL>

<P><STRONG><a name="[1db]"></a>MSGMAN_AisAckFifoStructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_ModuleInit
</UL>

<P><STRONG><a name="[1b6]"></a>MSGMAN_MsgStaticListIsFull</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListIsFull
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListIsFull
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListInsert
</UL>

<P><STRONG><a name="[1c1]"></a>MSGMAN_MsgStaticListIsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_RxMsgListIsEmpty
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_TxMsgListIsEmpty
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_MsgStaticListGetHead
</UL>

<P><STRONG><a name="[1c8]"></a>MSGMAN_AisAckFifoIsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_BurstSchedule
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_AisAckFifoDeque
</UL>

<P><STRONG><a name="[1dc]"></a>MSGMAN_MsgTxTaskStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, msgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSGMAN_PeriodSchedStructInit
</UL>

<P><STRONG><a name="[27e]"></a>UBX_UBXPrtCommStructInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UBX_UBXPrtCommStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxFIFOStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_ModuleInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_UBXPrtCommInstanceInit
</UL>

<P><STRONG><a name="[283]"></a>UBX_UBXPrtMsgSendBuff</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UBX_UBXPrtMsgSendBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_GpsStartupConfig
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_UBXPrtMsgSendBuff
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GpsIdleConfig
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GpsNormalConfig
</UL>

<P><STRONG><a name="[288]"></a>UBX_UBXPrtCommCtrlProcess</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UBX_UBXPrtCommCtrlProcess &rArr; UBX_UartResponseUbxMsg &rArr; UBX_UartTxUbxMsg &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimePeriodProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalClockTickProcess
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartResponseUbxMsg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartTxUbxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_UBXPrtCommCtrlProcess
</UL>

<P><STRONG><a name="[28f]"></a>UBX_GpsNormalConfig</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UBX_GpsNormalConfig &rArr; UBX_UBXPrtMsgSendBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtMsgSendBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_ModuleInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_GpsNormalConfig
</UL>

<P><STRONG><a name="[28a]"></a>UBX_MsgRxProcess</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UBX_MsgRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartRxProcess
</UL>

<P><STRONG><a name="[28b]"></a>UBX_GetReceivedUbxMess</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UBX_GetReceivedUbxMess &rArr; UBX_MsgDealProcess &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UartMsgCheckSum
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_MsgDealProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GetCOMMMess
</UL>

<P><STRONG><a name="[28e]"></a>UBX_GpsIdleConfig</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ubloxprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGpsPulseEn
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_UBXPrtMsgSendBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX1_GpsIdleConfig
</UL>

<P><STRONG><a name="[291]"></a>UBX_MsgDealProcess</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ubloxprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UBX_MsgDealProcess &rArr; debug_printf &rArr; UartTxString &rArr; UartTxDataBuf &rArr; UartTxMainProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBX_GetReceivedUbxMess
</UL>

<P><STRONG><a name="[293]"></a>TRCTRL_TransceiverTxCtrlStructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_ModuleInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTransceiverTxCtrlStructInit
</UL>

<P><STRONG><a name="[294]"></a>TRCTRL_TransceiverTestStructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_ModuleInit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTransceiverTestStructInit
</UL>

<P><STRONG><a name="[295]"></a>TRCTRL_TxTestSignalInit</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TRCTRL_TxTestSignalInit &rArr; DLS_FrameBuildTest &rArr; DLS_FrameCrcCheck &rArr; AIS_Cal_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLS_FrameBuildTest
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
</UL>

<P><STRONG><a name="[298]"></a>TRCTRL_TxTestGetSignalBit</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TRCTRL_TxTestGetSignalBit
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestGetSignalBit
</UL>

<P><STRONG><a name="[29a]"></a>TRCTRL_TxGetSignalBit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TRCTRL_TxGetSignalBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxDataClockISR
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxGetSignalBit
</UL>

<P><STRONG><a name="[29e]"></a>TRCTRL_TxTestCfgInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TRCTRL_TxTestCfgInit &rArr; SI446X_TxCfg &rArr; SI446X_GpioPinCfg &rArr; SI446X_GPIO_PIN_CFG &rArr; SI446X_ReadResponse &rArr; SI446X_WaitCts &rArr; SI446X_SPI_ExchangeByte &rArr; GPIO_SPI2_ExchangeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_TxCfg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgPN9Tx
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_CfgCwTx
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_TxTestCtrl
</UL>

<P><STRONG><a name="[29c]"></a>TRCTRL_GetTxTestFlg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstGetTxTestFlg
</UL>

<P><STRONG><a name="[2a1]"></a>TRCTRL_TxTestIsTx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, transceiverctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRCTRL_InstTxTestIsTx
</UL>

<P><STRONG><a name="[2ab]"></a>SLFCHK_SelfCheckProcess</STRONG> (Thumb, 2210 bytes, Stack size 160 bytes, selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = SLFCHK_SelfCheckProcess &rArr; RFL_SelfCheck &rArr; SendMsg18Test &rArr; InitMsg18Test &rArr; AISMSG_BuildMsg18 &rArr; bitmap_set_value &rArr; bitmap_set_value_for_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartResponseMsg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_SelfCheck
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GpsSelfCheckStructInit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_Si446xSelfCheckStructInit
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X_SelfCheck
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SelfCheck
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RtcSelfCheckStructInit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_SelfCheck
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFL_RfLinkSelfCheckStructInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SelfCheck
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EepromSelfCheckStructInit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_GetCheckSelect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckStructInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstSelfCheckProcess
</UL>

<P><STRONG><a name="[2a8]"></a>SLFCHK_SelfCheckStructInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, selfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_InstSelfCheckStructInit
</UL>

<P><STRONG><a name="[2b4]"></a>SLFCHK_GetCheckSelect</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SLFCHK_GetCheckSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_GetBitNum32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLFCHK_SelfCheckProcess
</UL>

<P><STRONG><a name="[347]"></a>GPIOSPI_SendData</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, gpiospi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_WaitClockPhase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_WaitClockPeriod
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_InstSendData
</UL>

<P><STRONG><a name="[346]"></a>GPIOSPI_WaitClockPeriod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpiospi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_InstWaitClockPeriod
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_SendData
</UL>

<P><STRONG><a name="[348]"></a>GPIOSPI_WaitClockPhase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpiospi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSPI_SendData
</UL>

<P><STRONG><a name="[390]"></a>TI2_Config</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[38e]"></a>TI1_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3c7]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3ba]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[3c9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[3af]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[3b5]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
